// ============================================================================
// MongoDB Initialization Script for BorgStack
// ============================================================================
// Purpose: Create dedicated database and user for Lowcoder service
//
// Database Isolation Strategy:
//   - MongoDB is dedicated exclusively to Lowcoder (no other services)
//   - Separation from PostgreSQL services maintains clear service boundaries
//   - Lowcoder requires NoSQL document storage for flexible application metadata
//   - Independent scaling: MongoDB can be tuned specifically for Lowcoder workload
//
// Execution Context:
//   - Runs automatically on first container startup (empty data volume)
//   - Executed by MongoDB Docker entrypoint as root admin user
//   - Environment variables from docker-compose.yml available via process.env
//
// Security:
//   - Root admin (username: admin) is used for administrative tasks only
//   - Lowcoder service uses dedicated user (lowcoder_user) with scoped permissions
//   - Principle of least privilege: lowcoder_user has readWrite + dbAdmin on lowcoder DB only
// ============================================================================

// Switch to lowcoder database (creates database if it doesn't exist)
db = db.getSiblingDB('lowcoder');

// Create dedicated user for Lowcoder service
db.createUser({
  user: 'lowcoder_user',
  pwd: process.env.LOWCODER_DB_PASSWORD,  // Password from .env file (generated by bootstrap.sh)
  roles: [
    {
      role: 'readWrite',
      db: 'lowcoder'
    },
    {
      role: 'dbAdmin',
      db: 'lowcoder'
    }
  ]
});

// Log successful initialization
print('âœ… MongoDB initialization complete:');
print('   - Database: lowcoder');
print('   - User: lowcoder_user');
print('   - Roles: readWrite, dbAdmin on lowcoder database');
print('   - Connection string: mongodb://lowcoder_user:${LOWCODER_DB_PASSWORD}@mongodb:27017/lowcoder?authSource=lowcoder');
