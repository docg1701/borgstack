# s3cmd Configuration for SeaweedFS S3 API
#
# This is a template configuration file for s3cmd to work with SeaweedFS.
# Copy this file to ~/.s3cfg and replace the placeholders with your actual credentials.
#
# Installation:
#   pip install s3cmd
#   OR
#   apt install s3cmd  (Ubuntu/Debian)
#
# Setup:
#   1. Copy this file: cp config/seaweedfs/s3cmd-config.ini ~/.s3cfg
#   2. Edit ~/.s3cfg and replace <SEAWEEDFS_ACCESS_KEY> and <SEAWEEDFS_SECRET_KEY>
#      with your actual credentials from .env file
#   3. Ensure file permissions: chmod 600 ~/.s3cfg
#
# Usage:
#   s3cmd ls                                      # List buckets
#   s3cmd ls s3://borgstack/                      # List files in bucket
#   s3cmd put myfile.txt s3://borgstack/test/     # Upload file
#   s3cmd get s3://borgstack/test/myfile.txt ./   # Download file
#
# For more examples, see config/seaweedfs/README.md
#

[default]
# SeaweedFS S3 API credentials
# Replace with your actual credentials from .env file
access_key = <SEAWEEDFS_ACCESS_KEY>
secret_key = <SEAWEEDFS_SECRET_KEY>

# SeaweedFS S3 endpoint
# Internal (from host): localhost:8333
# Internal (from container): seaweedfs:8333
# External (if enabled): s3.yourdomain.com
host_base = localhost:8333
host_bucket = localhost:8333/%(bucket)

# Use HTTP (not HTTPS) for local development
# Set to True if using external Caddy HTTPS endpoint
use_https = False

# S3 signature version
# SeaweedFS requires signature_v2 = False (uses v4)
signature_v2 = False

# Socket timeout (seconds)
socket_timeout = 300

# Human-readable sizes and timestamps
human_readable_sizes = True

# Don't check SSL certificate (only if use_https = True)
# For production with valid SSL, set to True
check_ssl_certificate = False
check_ssl_hostname = False

# Encryption (optional - encrypts files before upload)
# Requires GPG installed
# encrypt = True
# gpg_command = /usr/bin/gpg
# gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
# gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
# gpg_passphrase = CHANGE_ME_TO_SECURE_PASSPHRASE

# Multipart upload settings
# Files larger than this will be uploaded in chunks
multipart_chunk_size_mb = 15
multipart_max_chunks = 10000

# Enable reduced redundancy (not applicable to SeaweedFS)
# reduced_redundancy = False

# Verbosity level
# 0 = quiet, 1 = normal, 2 = verbose, 3 = debug
verbosity = 1

# Website configuration (for static website hosting)
# Not typically used with SeaweedFS
# website_endpoint = http://%(bucket)s.localhost:8333/
# website_index = index.html
# website_error = error.html

# ============================================================================
# Advanced Configuration
# ============================================================================

# Preserve file attributes on upload/download
preserve_attrs = True

# Progress meter (show upload/download progress)
progress_meter = True

# Enable server-side encryption (if supported)
# server_side_encryption = False

# Public read ACL (makes uploaded files publicly readable)
# acl_public = False

# Default MIME type for uploads
default_mime_type = binary/octet-stream

# Guess MIME type from file extension
guess_mime_type = True

# Follow symlinks when uploading directories
follow_symlinks = False

# ============================================================================
# Proxy Configuration (optional)
# ============================================================================
# Uncomment and configure if you need to use a proxy

# proxy_host = proxy.example.com
# proxy_port = 3128
# proxy_user = username
# proxy_pass = password

# ============================================================================
# CloudFront Configuration (not applicable to SeaweedFS)
# ============================================================================
# cloudfront_host = cloudfront.amazonaws.com

# ============================================================================
# Notes
# ============================================================================
#
# SeaweedFS S3 API compatibility:
#   ✅ Supported: Basic S3 operations (PUT, GET, DELETE, LIST)
#   ✅ Supported: Multipart uploads for large files
#   ✅ Supported: Bucket operations (create, delete, list)
#   ✅ Supported: Object metadata
#   ⚠️  Limited: ACLs (use at application level instead)
#   ❌ Not supported: Versioning, lifecycle policies, replication
#
# For full S3 API compatibility details, see:
#   https://github.com/seaweedfs/seaweedfs/wiki/Amazon-S3-API
#
# For BorgStack-specific usage, see:
#   config/seaweedfs/README.md
#   docs/03-services/seaweedfs.md (Portuguese guide)
#
