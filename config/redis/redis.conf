# =============================================================================
# BorgStack Redis Configuration
# =============================================================================
# Redis 8.2 Production Configuration
#
# Purpose: Cache and message queue for n8n, Chatwoot, Lowcoder, and Directus
# Server Specs: 36GB RAM, 8 vCPU
# Memory Allocation: 8GB (22% of total RAM)
#
# Service Usage:
#   - n8n:      Session management, Bull queue processing (DB 0)
#   - Chatwoot: Session management, Sidekiq background jobs (DB 0)
#   - Lowcoder: Session storage (DB 0)
#   - Directus: Caching layer (DB 0)
#
# Security: Password authentication via command line --requirepass flag
#           Network isolation via borgstack_internal Docker network
# =============================================================================

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================

# Bind to all interfaces for Docker network access
# Docker network isolation (borgstack_internal) provides security layer
# Services access Redis via Docker DNS: redis:6379
bind 0.0.0.0

# Protected mode provides additional safety when bind is set to 0.0.0.0
# Requires password authentication for all connections
protected-mode yes

# Default Redis port (standard)
port 6379

# TCP connection backlog (max pending connections)
# Default 511 is sufficient for typical workloads
tcp-backlog 511

# Timeout for idle client connections (0 = disable timeout)
# Set to 0 to let applications manage connection lifecycle
timeout 0

# TCP keepalive to detect dead connections
# Sends TCP ACKs every 300 seconds to detect network failures
tcp-keepalive 300

# =============================================================================
# MEMORY MANAGEMENT
# =============================================================================

# Maximum memory allocation: 8GB for 36GB RAM server (~22% allocation)
# Leaves memory for: PostgreSQL (8GB), MongoDB (4GB), System (4GB), Apps (16GB)
maxmemory 8gb

# Eviction policy when maxmemory is reached
# allkeys-lru: Evict any key using Least Recently Used algorithm
# Best for cache-focused workload where all keys are candidates for eviction
# Alternatives: volatile-lru (only keys with TTL), allkeys-lfu (least frequently used)
maxmemory-policy allkeys-lru

# Sample size for LRU/LFU algorithms
# Higher value = more accurate eviction, more CPU usage
# Default 5 provides good balance
maxmemory-samples 5

# =============================================================================
# PERSISTENCE CONFIGURATION
# =============================================================================

# RDB Snapshots (point-in-time backups)
# Format: save <seconds> <changes>
# Save after 900 seconds (15 min) if at least 1 key changed
save 900 1
# Save after 300 seconds (5 min) if at least 10 keys changed
save 300 10
# Save after 60 seconds if at least 10000 keys changed
save 60 10000

# Stop accepting writes if RDB snapshot fails (data safety)
stop-writes-on-bgsave-error yes

# Compress RDB snapshots using LZF algorithm
rdbcompression yes

# Add CRC64 checksum to RDB files for corruption detection
rdbchecksum yes

# RDB snapshot filename
dbfilename dump.rdb

# Append-Only File (AOF) for durability
# Logs every write operation for minimal data loss
appendonly yes

# AOF filename
appendfilename "appendonly.aof"

# AOF fsync policy (durability vs performance tradeoff)
# everysec: Fsync every second (max 1 second data loss on crash)
# Alternatives: always (slow, max durability), no (fast, OS decides when to fsync)
appendfsync everysec

# Disable fsync during BGSAVE/BGREWRITEAOF to prevent latency spikes
no-appendfsync-on-rewrite no

# AOF automatic rewrite configuration
# Rewrite AOF when it grows 100% (doubles in size)
auto-aof-rewrite-percentage 100

# Minimum AOF size before triggering rewrite
auto-aof-rewrite-min-size 64mb

# Load truncated AOF file on startup (recovery from crash)
aof-load-truncated yes

# Use more efficient AOF format (RDB preamble + AOF incremental changes)
aof-use-rdb-preamble yes

# Working directory for RDB and AOF files
# Docker volume mounted at /data
dir /data

# =============================================================================
# CONNECTION MANAGEMENT
# =============================================================================

# Maximum number of simultaneous client connections
# Supports all services with room for connection spikes
maxclients 1000

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Password authentication is set via command line: --requirepass ${REDIS_PASSWORD}
# This allows environment variable substitution in docker-compose.yml
# DO NOT set requirepass in this config file

# Disable dangerous commands in production
# FLUSHDB: Deletes all keys in current database
# FLUSHALL: Deletes all keys in all databases
# CONFIG: Allows runtime configuration changes (disabled causes issues with Redis 8.2.1 modules)
# Note: These commands return error "(error) ERR unknown command" when disabled
rename-command FLUSHDB ""
rename-command FLUSHALL ""
# CONFIG disabled temporarily due to Redis 8.2.1 internal module bug
# rename-command CONFIG ""

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# Slow log configuration (tracks slow operations for debugging)
# Log operations taking longer than 10ms (10000 microseconds)
slowlog-log-slower-than 10000

# Keep last 128 slow operations in memory
slowlog-max-len 128

# Lazy freeing (delete large objects in background to avoid blocking)
# Eviction: Free memory in background when maxmemory is reached
lazyfree-lazy-eviction yes

# Expiration: Delete expired keys in background
lazyfree-lazy-expire yes

# Server-side deletion: Free memory in background for DEL/UNLINK commands
lazyfree-lazy-server-del yes

# Replica: Free memory in background during full resynchronization
replica-lazy-flush yes

# =============================================================================
# LOGGING
# =============================================================================

# Log level: debug, verbose, notice, warning
# notice: Moderately verbose, suitable for production
loglevel notice

# Log to stdout (Docker captures container logs)
logfile ""

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Number of databases (default 16)
# BorgStack uses DB 0 for all services (simpler management)
databases 16

# Enable active defragmentation (Redis 7.0+)
# Reduces memory fragmentation automatically
# Set lower threshold for 8GB allocation
activedefrag yes

# Start defragmentation when fragmentation reaches 10%
active-defrag-ignore-bytes 100mb

# Minimum fragmentation percentage to trigger defragmentation
active-defrag-threshold-lower 10

# Defragmentation will try to free at least this percentage
active-defrag-threshold-upper 20

# Minimal effort for defragmentation (1-100)
active-defrag-cycle-min 5

# Maximal effort for defragmentation (1-100)
active-defrag-cycle-max 25

# =============================================================================
# MONITORING COMMANDS
# =============================================================================
# Useful Redis commands for monitoring (run via redis-cli):
#
# Memory usage:
#   INFO memory | grep used_memory_human
#
# Cache hit rate:
#   INFO stats | grep -E "keyspace_hits|keyspace_misses"
#   Hit Rate = keyspace_hits / (keyspace_hits + keyspace_misses) * 100
#
# Connected clients:
#   INFO clients | grep connected_clients
#
# Operations per second:
#   INFO stats | grep instantaneous_ops_per_sec
#
# Evicted keys:
#   INFO stats | grep evicted_keys
#
# Slow operations:
#   SLOWLOG GET 10
#
# Performance benchmark:
#   redis-benchmark -h localhost -p 6379 -a ${REDIS_PASSWORD} -t get,set -n 100000 -q
# =============================================================================
