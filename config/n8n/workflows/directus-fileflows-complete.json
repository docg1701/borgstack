{
  "name": "FileFlows â†’ Directus Update Results",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fileflows-complete",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-fileflows-complete",
      "name": "Webhook: FileFlows Complete",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "fileflows-complete"
    },
    {
      "parameters": {
        "functionCode": "// Extract FileFlows completion data\n// NOTE: Exact payload structure will be determined when configuring FileFlows webhook\nconst data = $input.item.json;\n\nreturn {\n  json: {\n    original_filename: data.original_filename || data.originalFilename,\n    processed_filename: data.processed_filename || data.processedFilename,\n    output_path: data.output_path || data.outputPath,\n    processing_status: data.status || 'completed',\n    metadata: data.metadata || {}\n  }\n};"
      },
      "id": "extract-completion-data",
      "name": "Extract Completion Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "=https://{{$env.DIRECTUS_HOST}}/items/directus_files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "directusApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter[filename_download][_eq]",
              "value": "={{$json.original_filename}}"
            }
          ]
        },
        "options": {}
      },
      "id": "query-directus-file",
      "name": "Query Directus File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300],
      "credentials": {
        "directusApi": {
          "id": "1",
          "name": "Directus API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Extract file ID from Directus response\nconst response = $input.item.json;\nconst fileData = response.data?.[0];\n\nif (!fileData) {\n  throw new Error('File not found in Directus: ' + $json.original_filename);\n}\n\nreturn {\n  json: {\n    file_id: fileData.id,\n    processed_url: $json.output_path,\n    processing_status: $json.processing_status,\n    processing_metadata: $json.metadata\n  }\n};"
      },
      "id": "prepare-update-payload",
      "name": "Prepare Update Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "=https://{{$env.DIRECTUS_HOST}}/items/directus_files/{{$json.file_id}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "directusApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "processed_url",
              "value": "={{$json.processed_url}}"
            },
            {
              "name": "processing_status",
              "value": "={{$json.processing_status}}"
            },
            {
              "name": "processing_metadata",
              "value": "={{JSON.stringify($json.processing_metadata)}}"
            }
          ]
        },
        "method": "PATCH",
        "options": {}
      },
      "id": "update-directus-file",
      "name": "Update Directus File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300],
      "credentials": {
        "directusApi": {
          "id": "1",
          "name": "Directus API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.processing_status}}",
              "operation": "equals",
              "value2": "completed"
            }
          ]
        }
      },
      "id": "check-status",
      "name": "Check Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "functionCode": "// Log successful processing\nconsole.log('File processing completed:', $json.original_filename);\nconsole.log('Directus updated with processed URL:', $json.processed_url);\n\nreturn $input.all();"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "functionCode": "// Log processing failure\nconsole.error('File processing failed:', $json.original_filename);\nconsole.error('Status:', $json.processing_status);\nconsole.error('Metadata:', JSON.stringify($json.processing_metadata));\n\n// TODO: Send email notification to admin\n// Requires email credentials configuration\n\nreturn $input.all();"
      },
      "id": "log-failure",
      "name": "Log Failure & Alert",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 400]
    }
  ],
  "connections": {
    "Webhook: FileFlows Complete": {
      "main": [
        [
          {
            "node": "Extract Completion Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Completion Data": {
      "main": [
        [
          {
            "node": "Query Directus File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Directus File": {
      "main": [
        [
          {
            "node": "Prepare Update Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update Payload": {
      "main": [
        [
          {
            "node": "Update Directus File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Directus File": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Failure & Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-05T00:00:00.000Z",
  "versionId": "1"
}
