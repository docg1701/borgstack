# ============================================================================
# BorgStack - Environment Variables Template
# ============================================================================
#
# IMPORTANT: This is a template file. DO NOT commit the actual .env file!
#
# Setup Instructions:
# 1. Copy this file to .env: cp .env.example .env
# 2. Replace all placeholder values with your actual configuration
# 3. Ensure .env has restricted permissions: chmod 600 .env
# 4. Never commit .env to version control (already in .gitignore)
#
# Security Best Practices:
# - Use strong, unique passwords (minimum 32 characters recommended)
# - Use a password manager to generate secure passwords
# - Rotate credentials regularly
# - Never share credentials via email or chat
# - Use different passwords for each service
#
# ============================================================================

# ============================================================================
# PostgreSQL Database (Shared)
# ============================================================================
# PostgreSQL is the primary relational database shared by n8n, Chatwoot,
# Directus, and Evolution API. Uses pgvector extension for AI/LLM features.
#
# Version: PostgreSQL 18.0 with pgvector extension

# Master PostgreSQL admin password
# Used by the postgres superuser account
POSTGRES_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# n8n database credentials
# Database name: n8n_db
N8N_DB_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# Chatwoot database credentials
# Database name: chatwoot_db
CHATWOOT_DB_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# Directus database credentials
# Database name: directus_db
DIRECTUS_DB_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# Evolution API database credentials
# Database name: evolution_db
EVOLUTION_DB_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# ============================================================================
# MongoDB Database (Lowcoder Only)
# ============================================================================
# MongoDB is used exclusively by Lowcoder for its metadata storage.
# Isolated from other services to prevent schema conflicts.
#
# Version: MongoDB 7.0
#
# Database Isolation Strategy:
#   - MongoDB dedicated exclusively to Lowcoder (no other services)
#   - Separation from PostgreSQL maintains clear service boundaries
#   - Lowcoder requires NoSQL for flexible application metadata
#
# Security:
#   - Root admin user (admin) for administrative tasks only
#   - Dedicated service user (lowcoder_user) with scoped permissions
#   - Principle of least privilege: lowcoder_user has readWrite + dbAdmin on lowcoder DB only
#
# ⚠️  SECURITY WARNING: Use strong, unique passwords (minimum 32 characters)
# Generate secure passwords with: openssl rand -base64 32 | tr -d "=+/" | cut -c1-32

# MongoDB root admin password (for administrative tasks only)
# Used by the admin user for database management
# IMPORTANT: This is used for MONGO_INITDB_ROOT_PASSWORD in docker-compose.yml
MONGODB_ROOT_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# Lowcoder database user password
# Used by lowcoder_user for application database access
# This user has readWrite and dbAdmin roles on the lowcoder database only
LOWCODER_DB_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# ============================================================================
# Redis Cache/Queue (Shared)
# ============================================================================
# Redis is used for session management, caching, and message queuing across
# all services. Shared to reduce infrastructure complexity.
#
# Version: Redis 8.2 (Alpine)
# Allocation: 8GB memory, optimized for 36GB RAM server
# Persistence: RDB snapshots + AOF (max 1 second data loss)
#
# Service Usage:
#   - n8n:      Session management, Bull queue processing (DB 0)
#   - Chatwoot: Session management, Sidekiq background jobs (DB 0)
#   - Lowcoder: Session storage (DB 0)
#   - Directus: Caching layer (DB 0)
#
# Connection String Formats (used automatically by service configurations):
#   Standard format: redis://:${REDIS_PASSWORD}@redis:6379
#   n8n format:      QUEUE_BULL_REDIS_HOST=redis QUEUE_BULL_REDIS_PORT=6379 QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
#   Chatwoot format: REDIS_HOST=redis REDIS_PORT=6379 REDIS_PASSWORD=${REDIS_PASSWORD}
#   Lowcoder format: LOWCODER_REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
#   Directus format: REDIS_HOST=redis REDIS_PORT=6379 REDIS_PASSWORD=${REDIS_PASSWORD}
#
# Security:
#   - Network isolation: Redis only accessible via borgstack_internal network
#   - Password authentication: Required for all connections
#   - No port exposure: Redis not accessible from host machine

# Redis password (minimum 32 characters recommended)
# Generate secure password: openssl rand -base64 32
# Used for all Redis operations and service connections
REDIS_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# ════════════════════════════════════════════════════════════════════════════
# Caddy Reverse Proxy Configuration
# ════════════════════════════════════════════════════════════════════════════
#
# Caddy provides automatic HTTPS with Let's Encrypt for all web services.
# SSL certificates are provisioned and renewed automatically with zero configuration.
#
# Version: Caddy 2.10 (Alpine)
# Features: Automatic HTTPS, HTTP to HTTPS redirection, reverse proxy routing

# Base domain for all services
# This domain must have DNS A records pointing to your server IP
# Example: example.com.br → Generates subdomains: n8n.example.com.br, chatwoot.example.com.br, etc.
DOMAIN=example.com.br

# Email for Let's Encrypt SSL certificate notifications
# Used for certificate expiration warnings (should never happen due to auto-renewal)
# Replace with administrator email address
EMAIL=admin@example.com.br

# CORS (Cross-Origin Resource Sharing) allowed origins for API services
# Controls which domains can access Evolution API and Directus API endpoints
#
# SECURITY WARNING: The default "*" (wildcard) allows requests from ANY origin.
# This is ONLY acceptable for development/testing environments.
#
# Production Configuration (REQUIRED before production deployment):
#   - Replace "*" with specific allowed origins (comma-separated list)
#   - Examples:
#     Single origin:  https://app.example.com.br
#     Multiple:       https://app.example.com.br,https://admin.example.com.br
#     Localhost dev:  http://localhost:3000,http://localhost:8080
#
# Affected Services:
#   - Evolution API (WhatsApp Business API - Story 2.2)
#   - Directus (Headless CMS API - Story 4.1)
#
# Note: Web UI services (n8n, Chatwoot, Lowcoder, FileFlows, Duplicati) do not
# use CORS headers as they serve their own UIs directly.
CORS_ALLOWED_ORIGINS=*

# ════════════════════════════════════════════════════════════════════════════
# DNS Configuration Requirements
# ════════════════════════════════════════════════════════════════════════════
# Before deploying Caddy, create DNS A records for all subdomains:
#   n8n.example.com.br      A   YOUR_SERVER_IP
#   chatwoot.example.com.br A   YOUR_SERVER_IP
#   evolution.example.com.br A  YOUR_SERVER_IP
#   lowcoder.example.com.br A   YOUR_SERVER_IP
#   directus.example.com.br A   YOUR_SERVER_IP
#   fileflows.example.com.br A  YOUR_SERVER_IP
#   duplicati.example.com.br A  YOUR_SERVER_IP
#
# Verification Commands:
#   Verify DNS propagation: dig n8n.example.com.br +short
#   Expected output: YOUR_SERVER_IP
#
# SSL Certificate Generation:
#   - Occurs automatically on first request to each subdomain
#   - Requires port 80 accessible for ACME HTTP-01 challenge
#   - Can take 30-60 seconds per domain on first deployment
#   - Caddy retries automatically if initial attempt fails
#   - Certificates stored in borgstack_caddy_data volume
#   - Auto-renewal 30 days before expiration (no manual intervention)
#
# Firewall Requirements:
#   - Port 80 must be open (HTTP and ACME challenge)
#   - Port 443 must be open (HTTPS)
#   - Verify with: sudo ufw status (if using ufw)
# ════════════════════════════════════════════════════════════════════════════

# ============================================================================
# Service-Specific Configuration
# ============================================================================

# ----------------------------------------------------------------------------
# n8n Configuration
# ----------------------------------------------------------------------------
# Workflow automation platform configuration
#
# n8n workflow automation credentials
# ⚠️  CRITICAL SECURITY: The N8N_ENCRYPTION_KEY protects all workflow credentials
#     - NEVER share or commit this key to version control
#     - Loss of this key = loss of access to ALL encrypted workflow credentials
#     - Store securely (password manager, encrypted backup)
#     - Rotate regularly in production environments

# n8n hostname (subdomain for n8n service)
# This is automatically constructed using the base DOMAIN variable
N8N_HOST=n8n.${DOMAIN}

# n8n basic authentication (initial admin account)
# Used for HTTP Basic Auth protection before reaching n8n login
# Change these after first login via n8n web interface
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# n8n encryption key (used for encrypting credentials in database)
# Generate with: openssl rand -base64 32
# CRITICAL: Backup this key securely - without it, encrypted credentials are lost
N8N_ENCRYPTION_KEY=CHANGE_ME_TO_A_SECURE_KEY_MIN_32_CHARS

# n8n database password (for n8n_user PostgreSQL access)
# Generate with: openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
N8N_DB_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# ----------------------------------------------------------------------------
# Chatwoot Configuration
# ----------------------------------------------------------------------------
# Customer communication platform configuration

# Chatwoot secret key base (used for encryption)
# Generate with: openssl rand -hex 64
CHATWOOT_SECRET_KEY_BASE=CHANGE_ME_TO_A_128_CHARACTER_HEX_STRING

# Chatwoot initial admin account
CHATWOOT_ADMIN_EMAIL=admin@example.com
CHATWOOT_ADMIN_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# ----------------------------------------------------------------------------
# Evolution API Configuration
# ----------------------------------------------------------------------------
# WhatsApp Business API gateway for multi-instance WhatsApp connectivity
#
# Evolution API is a self-hosted WhatsApp Business API gateway that enables
# WhatsApp message sending/receiving through HTTP API endpoints and webhooks.
#
# Key Features:
#   - Multi-instance support (multiple WhatsApp business accounts per server)
#   - QR code authentication (scan with WhatsApp to connect)
#   - Webhook delivery to n8n for incoming message events
#   - PostgreSQL storage for message history and instance data
#   - Redis caching for session management
#
# Security Architecture:
#   - API key authentication required for all API operations
#   - Instance-level authentication for granular access control
#   - Database isolation (evolution_user has access only to evolution_db)
#   - Network isolation (no port exposure, HTTPS via Caddy only)
#
# Integration Pattern:
#   WhatsApp → Evolution API → Webhook → n8n → Chatwoot/other services
#
# ⚠️  CRITICAL SECURITY WARNINGS:
#   1. EVOLUTION_API_KEY: Protects ALL Evolution API operations (instance creation, message sending)
#      - Use strong 32+ character key (generate with: openssl rand -base64 32)
#      - Include in apikey header for ALL API requests
#      - NEVER expose in client-side code or public repositories
#      - Rotate regularly (monthly recommended for production)
#
#   2. EVOLUTION_DB_PASSWORD: PostgreSQL database access for message history
#      - Already configured above in PostgreSQL section (line 48)
#      - Used by Evolution API to store WhatsApp messages and instance configurations
#
#   3. EVOLUTION_WEBHOOK_URL: Destination for incoming WhatsApp messages
#      - Must use HTTPS (HTTP webhooks will be rejected by Evolution API)
#      - n8n webhook endpoint must be active before Evolution API sends events

# Evolution API hostname (subdomain for Evolution API service)
# Admin UI accessible at: https://${EVOLUTION_HOST}/manager
# API documentation: https://${EVOLUTION_HOST}/docs
EVOLUTION_HOST=evolution.${DOMAIN}

# Evolution API global authentication key
# Required in "apikey" header for ALL API operations:
#   - Instance creation (POST /instance/create)
#   - Message sending (POST /message/sendText/{instanceName})
#   - Instance management (GET/DELETE /instance/{instanceName})
# Generate with: openssl rand -base64 32
# ⚠️  WARNING: Treat this key like a root password - it controls ALL WhatsApp instances
EVOLUTION_API_KEY=CHANGE_ME_TO_A_SECURE_API_KEY_MIN_32_CHARS

# Evolution API webhook URL for incoming WhatsApp messages
# Evolution API sends incoming messages to this n8n webhook endpoint
# n8n workflow receives messages and routes to Chatwoot or other services
# Format: https://{N8N_HOST}/webhook/{path}
# Must be HTTPS (Evolution API rejects HTTP webhooks for security)
EVOLUTION_WEBHOOK_URL=https://${N8N_HOST}/webhook/whatsapp-incoming

# Prisma database client identifier (internal - do not change)
# Used by Evolution API's Prisma ORM for connection pool naming
DATABASE_CONNECTION_CLIENT_NAME=evolution_api

# ----------------------------------------------------------------------------
# Directus Configuration
# ----------------------------------------------------------------------------
# Headless CMS configuration

# Directus admin credentials (initial admin account)
DIRECTUS_ADMIN_EMAIL=admin@example.com
DIRECTUS_ADMIN_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# Directus key and secret (used for JWT tokens)
# Generate with: openssl rand -hex 32
DIRECTUS_KEY=CHANGE_ME_TO_A_64_CHARACTER_HEX_STRING
DIRECTUS_SECRET=CHANGE_ME_TO_A_64_CHARACTER_HEX_STRING

# ----------------------------------------------------------------------------
# SeaweedFS Configuration
# ----------------------------------------------------------------------------
# S3-compatible object storage configuration

# SeaweedFS admin credentials
SEAWEEDFS_ADMIN_USER=admin
SEAWEEDFS_ADMIN_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# S3 access credentials
SEAWEEDFS_S3_ACCESS_KEY=CHANGE_ME_TO_A_20_CHARACTER_ACCESS_KEY
SEAWEEDFS_S3_SECRET_KEY=CHANGE_ME_TO_A_40_CHARACTER_SECRET_KEY

# ----------------------------------------------------------------------------
# FileFlows Configuration
# ----------------------------------------------------------------------------
# Automated media processing configuration

# FileFlows admin credentials
FILEFLOWS_ADMIN_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# ----------------------------------------------------------------------------
# Duplicati Configuration
# ----------------------------------------------------------------------------
# Backup management configuration

# Duplicati web UI password
DUPLICATI_ADMIN_PASSWORD=CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS

# Duplicati backup encryption passphrase
DUPLICATI_BACKUP_PASSPHRASE=CHANGE_ME_TO_A_SECURE_PASSPHRASE_STORE_SAFELY

# ============================================================================
# Backup Configuration
# ============================================================================
# Configure external backup destinations (optional)

# Example: S3-compatible storage
# BACKUP_S3_ENDPOINT=https://s3.amazonaws.com
# BACKUP_S3_BUCKET=borgstack-backups
# BACKUP_S3_ACCESS_KEY=YOUR_ACCESS_KEY
# BACKUP_S3_SECRET_KEY=YOUR_SECRET_KEY

# Example: FTP/SFTP
# BACKUP_FTP_HOST=ftp.example.com
# BACKUP_FTP_USERNAME=backup_user
# BACKUP_FTP_PASSWORD=CHANGE_ME

# ============================================================================
# Email Configuration (Optional)
# ============================================================================
# Configure SMTP for email notifications from services

# SMTP server configuration
# SMTP_HOST=smtp.example.com
# SMTP_PORT=587
# SMTP_USERNAME=notifications@example.com
# SMTP_PASSWORD=CHANGE_ME
# SMTP_FROM_EMAIL=noreply@example.com
# SMTP_FROM_NAME=BorgStack

# ============================================================================
# Advanced Configuration
# ============================================================================

# Timezone (default: UTC)
TZ=UTC

# Log level (debug, info, warn, error)
LOG_LEVEL=info

# ============================================================================
# End of Configuration
# ============================================================================
