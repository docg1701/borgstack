# BorgStack - Docker Compose Configuration
# Docker Compose v2 Format
#
# This is the main orchestration file for BorgStack.
# Services will be added incrementally as the project develops.
#
# Architecture: All services share borgstack_internal network for inter-service communication
# External access is routed through Caddy reverse proxy on borgstack_external network
#
# IMPORTANT: Always pin exact image versions. Never use 'latest' tag.

# Services will be defined here as we build out the stack
# services:
#   postgresql:
#     image: pgvector/pgvector:pg18
#     networks:
#       - borgstack_internal
#     volumes:
#       - borgstack_postgresql_data:/var/lib/postgresql/data
#
#   redis:
#     image: redis:8.2-alpine
#     networks:
#       - borgstack_internal
#     volumes:
#       - borgstack_redis_data:/data
#
#   (Additional services: n8n, chatwoot, evolution-api, lowcoder, directus, fileflows, seaweedfs, duplicati, caddy)

networks:
  borgstack_internal:
    driver: bridge
    internal: true
    # ════════════════════════════════════════════════════════════════════════════
    # INTERNAL NETWORK - Service-to-Service Communication
    # ════════════════════════════════════════════════════════════════════════════
    # Purpose: Secure backend communication between application services and databases
    # Security: internal: true prevents external host access - defense in depth
    #
    # Services connecting to this network (to be implemented in future stories):
    #   - PostgreSQL (Story 1.3)       - Database for n8n, Chatwoot, Directus, Evolution API
    #   - MongoDB (Story 1.4)          - Database for Lowcoder
    #   - Redis (Story 1.7)            - Cache/queue for all services
    #   - n8n (Story 2.1)              - Workflow automation (internal + external)
    #   - Chatwoot (Story 3.1)         - Customer service (internal + external)
    #   - Evolution API (Story 2.2)    - WhatsApp API (internal + external)
    #   - Lowcoder (Story 3.3)         - App builder (internal + external)
    #   - Directus (Story 4.1)         - Headless CMS (internal + external)
    #   - FileFlows (Story 4.2)        - Media processing (internal + external)
    #   - SeaweedFS (Story 1.6)        - Object storage (internal + external)
    #   - Duplicati (Story 1.8)        - Backup system (internal only)
    #
    # Service Discovery (Docker DNS - automatic):
    #   Connection strings use service names directly, no manual IP configuration:
    #     - PostgreSQL: postgresql:5432
    #     - MongoDB:    mongodb:27017
    #     - Redis:      redis:6379
    #   Example: DB_HOST=postgresql DB_PORT=5432 (DNS resolves automatically)
    #
    # Port Exposure Policy:
    #   ✅ Databases/caches: NO ports section in production (internal access only)
    #   ❌ Never expose database ports to host: prevents unauthorized direct access
    #   ℹ️  Dev port mappings allowed in docker-compose.override.yml for debugging

  borgstack_external:
    driver: bridge
    # ════════════════════════════════════════════════════════════════════════════
    # EXTERNAL NETWORK - Reverse Proxy Access
    # ════════════════════════════════════════════════════════════════════════════
    # Purpose: Internet-facing traffic routing through Caddy reverse proxy
    # Security: Only Caddy exposes ports 80/443 to host - single entry point
    #
    # Services connecting to this network:
    #   - Caddy (Story 1.5)            - HTTPS termination, routing (ONLY service exposing ports to host)
    #   - Application services         - Connect to BOTH networks for DB access + external routing
    #
    # Multi-Network Pattern (services needing both internal DB access and external web access):
    #   services:
    #     n8n:
    #       networks:
    #         - borgstack_internal    # For PostgreSQL, Redis connections
    #         - borgstack_external    # For Caddy reverse proxy routing
    #
    # Port Mapping Strategy:
    #   ✅ Only Caddy exposes ports 80/443 to host (implemented in Story 1.5)
    #   ✅ All external access flows through Caddy reverse proxy
    #   ℹ️  Application services accessed via: https://service.yourdomain.com (Caddy routes internally)
    #   ℹ️  Dev environment: docker-compose.override.yml may expose additional ports for debugging

# Volumes will be added as services are implemented
# All volumes must use the borgstack_ prefix
# Example volume definitions:
#
# volumes:
#   borgstack_postgresql_data:
#   borgstack_mongodb_data:
#   borgstack_redis_data:
#   borgstack_n8n_data:
#   borgstack_chatwoot_data:
#   borgstack_evolution_data:
#   borgstack_lowcoder_data:
#   borgstack_directus_data:
#   borgstack_fileflows_data:
#   borgstack_seaweedfs_data:
#   borgstack_duplicati_data:
#   borgstack_caddy_data:
#   borgstack_caddy_config:
