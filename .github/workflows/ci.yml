name: BorgStack CI

# Trigger CI on push to main/feature branches and pull requests
on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main

jobs:
  validate-docker-compose:
    name: Validate Docker Compose Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml syntax
        run: |
          echo "Validating main docker-compose.yml..."
          docker compose -f docker-compose.yml config --quiet
          if [ $? -eq 0 ]; then
            echo "✅ docker-compose.yml is valid"
          else
            echo "❌ docker-compose.yml validation failed"
            exit 1
          fi

      - name: Validate docker-compose.override.yml syntax
        run: |
          echo "Validating docker-compose.override.yml..."
          docker compose -f docker-compose.yml -f docker-compose.override.yml config --quiet
          if [ $? -eq 0 ]; then
            echo "✅ docker-compose.override.yml is valid"
          else
            echo "❌ docker-compose.override.yml validation failed"
            exit 1
          fi

      - name: Validate docker-compose.prod.yml syntax
        run: |
          echo "Validating docker-compose.prod.yml..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml config --quiet
          if [ $? -eq 0 ]; then
            echo "✅ docker-compose.prod.yml is valid"
          else
            echo "❌ docker-compose.prod.yml validation failed"
            exit 1
          fi

      - name: Check for 'latest' tags in docker-compose.yml
        run: |
          echo "Checking for 'latest' image tags (not allowed per coding standards)..."
          if grep -n "image:.*:latest" docker-compose.yml docker-compose.override.yml docker-compose.prod.yml 2>/dev/null; then
            echo "❌ Found 'latest' tag(s) in Docker Compose files"
            echo "Per coding standards, all images must use pinned versions"
            exit 1
          else
            echo "✅ No 'latest' tags found"
          fi

      - name: Verify network naming conventions
        run: |
          echo "Verifying network naming follows 'borgstack_' prefix convention..."
          # Extract network names from docker-compose.yml and verify naming convention
          INVALID_NETWORKS=$(sed -n '/^networks:/,/^[^ ]/{/^  [a-z_-]\+:/p}' docker-compose.yml | sed 's/:.*//; s/^  //' | grep -v "^borgstack_" || true)
          if [ -n "$INVALID_NETWORKS" ]; then
            echo "❌ Found network(s) not following 'borgstack_' prefix convention:"
            echo "$INVALID_NETWORKS"
            exit 1
          else
            echo "✅ Network naming conventions verified"
          fi

      - name: Verify volume naming conventions
        run: |
          echo "Verifying volume naming follows 'borgstack_' prefix convention..."
          docker compose -f docker-compose.yml config 2>/dev/null | grep -A 1 "^volumes:" | grep -v "^volumes:" | grep -v "^--$" | grep -v "borgstack_" | grep -v "^$" && {
            echo "❌ Found volume(s) not following 'borgstack_' prefix convention"
            exit 1
          } || {
            echo "✅ Volume naming conventions verified"
          }

      - name: Verify network isolation configuration
        run: |
          echo "Running network isolation verification tests..."
          chmod +x tests/deployment/verify-network-isolation.sh
          ./tests/deployment/verify-network-isolation.sh

  verify-structure:
    name: Verify Repository Structure
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify required directories exist
        run: |
          echo "Verifying directory structure..."

          # Check all required directories from source-tree.md
          REQUIRED_DIRS=(
            "config"
            "config/postgresql"
            "config/mongodb"
            "config/redis"
            "config/seaweedfs"
            "config/caddy"
            "config/n8n"
            "config/chatwoot"
            "config/evolution"
            "config/duplicati"
            "scripts"
            "docs"
            "docs/03-services"
            "docs/04-integrations"
            "tests/integration"
            "tests/deployment"
            ".github/workflows"
          )

          MISSING_DIRS=()
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              MISSING_DIRS+=("$dir")
            fi
          done

          if [ ${#MISSING_DIRS[@]} -eq 0 ]; then
            echo "✅ All required directories exist"
          else
            echo "❌ Missing directories:"
            printf '%s\n' "${MISSING_DIRS[@]}"
            exit 1
          fi

      - name: Verify required root files exist
        run: |
          echo "Verifying required root files..."

          REQUIRED_FILES=(
            "docker-compose.yml"
            "docker-compose.override.yml"
            "docker-compose.prod.yml"
            ".gitignore"
            ".env.example"
            "README.md"
            "LICENSE"
          )

          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "✅ All required files exist"
          else
            echo "❌ Missing files:"
            printf '%s\n' "${MISSING_FILES[@]}"
            exit 1
          fi

      - name: Verify .env is properly ignored
        run: |
          echo "Verifying .env files are in .gitignore..."
          if grep -q "^\.env$" .gitignore && \
             grep -q "^\.env\.local$" .gitignore && \
             grep -q "^\.env\.\*\.local$" .gitignore; then
            echo "✅ .env files are properly configured in .gitignore"
          else
            echo "❌ .env files are not properly configured in .gitignore"
            exit 1
          fi

  validate-postgresql:
    name: Validate PostgreSQL Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          EOF

      - name: Verify PostgreSQL configuration in docker-compose.yml
        run: |
          echo "Verifying PostgreSQL service is configured..."

          # Check PostgreSQL image version is pinned correctly
          if docker compose config | grep -q "image: pgvector/pgvector:pg18"; then
            echo "✅ PostgreSQL image correctly configured (pgvector/pgvector:pg18)"
          else
            echo "❌ PostgreSQL image not configured correctly"
            exit 1
          fi

          # Check PostgreSQL is on borgstack_internal network
          if docker compose config | grep -A 30 "postgresql:" | grep -q "borgstack_internal"; then
            echo "✅ PostgreSQL connected to borgstack_internal network"
          else
            echo "❌ PostgreSQL not connected to borgstack_internal network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_postgresql_data"; then
            echo "✅ Volume follows borgstack_ naming convention"
          else
            echo "❌ Volume does not follow naming convention"
            exit 1
          fi

      - name: Run PostgreSQL validation tests
        run: |
          echo "Running comprehensive PostgreSQL validation tests..."
          chmod +x tests/deployment/verify-postgresql.sh
          bash tests/deployment/verify-postgresql.sh

      - name: Cleanup PostgreSQL test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-redis:
    name: Validate Redis Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          CORS_ALLOWED_ORIGINS=*
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_auth_password_12345678
          N8N_ENCRYPTION_KEY=test_n8n_encryption_key_12345678901234567890
          EVOLUTION_API_KEY=test_evolution_api_key_12345678901234567890
          EVOLUTION_HOST=evolution.example.com.br
          EVOLUTION_WEBHOOK_URL=https://n8n.example.com.br/webhook/evolution
          EOF

      - name: Verify Redis configuration in docker-compose.yml
        run: |
          echo "Verifying Redis service is configured..."

          # Check Redis image version is pinned correctly
          if docker compose config | grep -q "image: redis:8.2-alpine"; then
            echo "✅ Redis image correctly configured (redis:8.2-alpine)"
          else
            echo "❌ Redis image not configured correctly"
            exit 1
          fi

          # Check Redis is on borgstack_internal network
          if docker compose config | grep -A 30 "redis:" | grep -q "borgstack_internal"; then
            echo "✅ Redis connected to borgstack_internal network"
          else
            echo "❌ Redis not connected to borgstack_internal network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_redis_data"; then
            echo "✅ Volume follows borgstack_ naming convention"
          else
            echo "❌ Volume does not follow naming convention"
            exit 1
          fi

          # Verify no port exposure in production config
          if docker compose config | grep -A 20 "redis:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ Redis has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health check is configured
          if docker compose config | grep -A 30 "redis:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Redis"
          else
            echo "❌ Health check not configured for Redis"
            exit 1
          fi

      - name: Run Redis validation tests
        run: |
          echo "Running comprehensive Redis validation tests..."
          chmod +x tests/deployment/verify-redis.sh
          bash tests/deployment/verify-redis.sh

      - name: Cleanup Redis test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-caddy:
    name: Validate Caddy Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          EOF

      - name: Verify Caddy configuration in docker-compose.yml
        run: |
          echo "Verifying Caddy service is configured..."

          # Check Caddy image version is pinned correctly
          if docker compose config | grep -q "image: caddy:2.10-alpine"; then
            echo "✅ Caddy image correctly configured (caddy:2.10-alpine)"
          else
            echo "❌ Caddy image not configured correctly"
            exit 1
          fi

          # Check Caddy is on borgstack_external network
          if docker compose config | grep -A 30 "caddy:" | grep -q "borgstack_external"; then
            echo "✅ Caddy connected to borgstack_external network"
          else
            echo "❌ Caddy not connected to borgstack_external network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_caddy_data"; then
            echo "✅ borgstack_caddy_data volume follows naming convention"
          else
            echo "❌ borgstack_caddy_data volume not found"
            exit 1
          fi

          if docker compose config | grep -q "borgstack_caddy_config"; then
            echo "✅ borgstack_caddy_config volume follows naming convention"
          else
            echo "❌ borgstack_caddy_config volume not found"
            exit 1
          fi

          # Verify Caddy exposes ports 80 and 443
          # Note: docker compose config expands "80:80" to multi-line format with published: "80"
          if docker compose config | grep -A 20 "caddy:" | grep "published:" | grep -q '"80"'; then
            echo "✅ Port 80 exposed"
          else
            echo "❌ Port 80 not exposed"
            exit 1
          fi

          if docker compose config | grep -A 20 "caddy:" | grep "published:" | grep -q '"443"'; then
            echo "✅ Port 443 exposed"
          else
            echo "❌ Port 443 not exposed"
            exit 1
          fi

          # Verify health check is configured
          if docker compose config | grep -A 30 "caddy:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Caddy"
          else
            echo "❌ Health check not configured for Caddy"
            exit 1
          fi

      - name: Validate Caddyfile syntax
        run: |
          echo "Validating Caddyfile syntax..."
          docker compose run --rm caddy caddy validate --config /etc/caddy/Caddyfile

      - name: Verify security headers configured
        run: |
          echo "Verifying security headers in Caddyfile..."

          if grep -q "X-Frame-Options" config/caddy/Caddyfile; then
            echo "✅ X-Frame-Options header configured"
          else
            echo "❌ X-Frame-Options header not found"
            exit 1
          fi

          if grep -q "X-Content-Type-Options" config/caddy/Caddyfile; then
            echo "✅ X-Content-Type-Options header configured"
          else
            echo "❌ X-Content-Type-Options header not found"
            exit 1
          fi

      - name: Verify CORS configuration
        run: |
          echo "Verifying CORS configuration for API services..."

          if grep -q "Access-Control-Allow-Origin" config/caddy/Caddyfile; then
            echo "✅ CORS headers configured"
          else
            echo "❌ CORS headers not found"
            exit 1
          fi

      - name: Verify all services have reverse proxy blocks
        run: |
          echo "Verifying all 7 services have reverse proxy blocks..."

          SERVICES=("n8n" "chatwoot" "evolution" "lowcoder" "directus" "fileflows" "duplicati")
          ALL_FOUND=true

          for service in "${SERVICES[@]}"; do
            if grep -q "${service}\.{\$DOMAIN}" config/caddy/Caddyfile; then
              echo "✅ ${service} reverse proxy block configured"
            else
              echo "❌ ${service} reverse proxy block not found"
              ALL_FOUND=false
            fi
          done

          if [ "$ALL_FOUND" = false ]; then
            exit 1
          fi

      - name: Start Caddy for testing
        run: |
          echo "Starting Caddy service..."
          docker compose up -d caddy
          sleep 15

      - name: Run Caddy validation tests
        run: |
          echo "Running comprehensive Caddy validation tests..."
          chmod +x tests/deployment/verify-caddy.sh
          bash tests/deployment/verify-caddy.sh

      - name: Cleanup Caddy test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-mongodb:
    name: Validate MongoDB Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          EOF

      - name: Verify MongoDB configuration in docker-compose.yml
        run: |
          echo "Verifying MongoDB service is configured..."

          # Check MongoDB image version is pinned correctly
          if docker compose config | grep -q "image: mongo:7.0"; then
            echo "✅ MongoDB image correctly configured (mongo:7.0)"
          else
            echo "❌ MongoDB image not configured correctly"
            exit 1
          fi

          # Check MongoDB is on borgstack_internal network
          if docker compose config | grep -A 30 "mongodb:" | grep -q "borgstack_internal"; then
            echo "✅ MongoDB connected to borgstack_internal network"
          else
            echo "❌ MongoDB not connected to borgstack_internal network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_mongodb_data"; then
            echo "✅ Volume follows borgstack_ naming convention"
          else
            echo "❌ Volume does not follow naming convention"
            exit 1
          fi

          # Verify no port exposure in production config
          if docker compose config | grep -A 30 "mongodb:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ MongoDB has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health check is configured
          if docker compose config | grep -A 35 "mongodb:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for MongoDB"
          else
            echo "❌ Health check not configured for MongoDB"
            exit 1
          fi

      - name: Validate init-mongo.js syntax
        run: |
          echo "Validating MongoDB initialization script syntax..."

          # Check if init-mongo.js exists
          if [ ! -f "config/mongodb/init-mongo.js" ]; then
            echo "❌ config/mongodb/init-mongo.js not found"
            exit 1
          fi

          # Use Node.js to validate JavaScript syntax
          if node --check config/mongodb/init-mongo.js; then
            echo "✅ init-mongo.js syntax is valid"
          else
            echo "❌ init-mongo.js syntax validation failed"
            exit 1
          fi

      - name: Verify MongoDB environment variables
        run: |
          echo "Verifying MongoDB environment variables configuration..."

          # Check MONGO_INITDB_ROOT_USERNAME is set to admin
          if docker compose config | grep -A 30 "mongodb:" | grep -q "MONGO_INITDB_ROOT_USERNAME: admin"; then
            echo "✅ MONGO_INITDB_ROOT_USERNAME set to 'admin'"
          else
            echo "❌ MONGO_INITDB_ROOT_USERNAME not set to 'admin'"
            exit 1
          fi

          # Check MONGO_INITDB_ROOT_PASSWORD is configured
          if docker compose config | grep -A 30 "mongodb:" | grep -q "MONGO_INITDB_ROOT_PASSWORD:"; then
            echo "✅ MONGO_INITDB_ROOT_PASSWORD configured"
          else
            echo "❌ MONGO_INITDB_ROOT_PASSWORD not configured"
            exit 1
          fi

          # Check LOWCODER_DB_PASSWORD is configured
          if docker compose config | grep -A 30 "mongodb:" | grep -q "LOWCODER_DB_PASSWORD:"; then
            echo "✅ LOWCODER_DB_PASSWORD configured"
          else
            echo "❌ LOWCODER_DB_PASSWORD not configured"
            exit 1
          fi

      - name: Verify init-mongo.js is mounted
        run: |
          echo "Verifying init-mongo.js is mounted in container..."

          if docker compose config | grep -A 50 "mongodb:" | grep -q "target: /docker-entrypoint-initdb.d/init-mongo.js"; then
            echo "✅ init-mongo.js mounted correctly"
          else
            echo "❌ init-mongo.js not mounted"
            exit 1
          fi

      - name: Run MongoDB validation tests
        run: |
          echo "Running comprehensive MongoDB validation tests..."
          chmod +x tests/deployment/verify-mongodb.sh
          bash tests/deployment/verify-mongodb.sh

      - name: Cleanup MongoDB test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-n8n:
    name: Validate n8n Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          # PostgreSQL passwords
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          # MongoDB passwords
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          # Redis password
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          # Domain and email
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          CORS_ALLOWED_ORIGINS=*
          # n8n configuration
          N8N_HOST=n8n.example.com.br
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_auth_password_12345678
          N8N_ENCRYPTION_KEY=test_n8n_encryption_key_12345678901234567890
          # Chatwoot configuration
          CHATWOOT_HOST=chatwoot.example.com.br
          CHATWOOT_SECRET_KEY_BASE=test_chatwoot_secret_key_base_128_character_hex_string_0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef123456789
          CHATWOOT_API_TOKEN=test_chatwoot_api_token_dummy_for_ci
          # Evolution API configuration
          EVOLUTION_HOST=evolution.example.com.br
          EVOLUTION_API_KEY=test_evolution_api_key_12345678
          EVOLUTION_WEBHOOK_URL=https://n8n.example.com.br/webhook/whatsapp-incoming
          DATABASE_CONNECTION_CLIENT_NAME=evolution_api
          # Lowcoder configuration
          LOWCODER_HOST=lowcoder.example.com.br
          LOWCODER_ADMIN_EMAIL=admin@example.com.br
          LOWCODER_ADMIN_PASSWORD=test_lowcoder_admin_password_12345678
          LOWCODER_ENCRYPTION_PASSWORD=test_lowcoder_encryption_pass_123456
          LOWCODER_ENCRYPTION_SALT=test_lowcoder_encryption_salt_123456
          # Directus configuration
          DIRECTUS_HOST=directus.example.com.br
          DIRECTUS_KEY=test_directus_key_12345678901234567890123456789012
          DIRECTUS_SECRET=test_directus_secret_12345678901234567890123456
          DIRECTUS_ADMIN_EMAIL=admin@example.com.br
          DIRECTUS_ADMIN_PASSWORD=test_directus_admin_password_12345678
          EOF

      - name: Verify n8n configuration in docker-compose.yml
        run: |
          echo "Verifying n8n service is configured..."

          # Check n8n image version is pinned correctly
          if docker compose config | grep -q "image: n8nio/n8n:1.112.6"; then
            echo "✅ n8n image correctly configured (n8nio/n8n:1.112.6)"
          else
            echo "❌ n8n image not configured correctly"
            exit 1
          fi

          # Check n8n is on both networks
          if docker compose config | grep -A 50 "n8n:" | grep -q "borgstack_internal"; then
            echo "✅ n8n connected to borgstack_internal network"
          else
            echo "❌ n8n not connected to borgstack_internal network"
            exit 1
          fi

          if docker compose config | grep -A 50 "n8n:" | grep -q "borgstack_external"; then
            echo "✅ n8n connected to borgstack_external network"
          else
            echo "❌ n8n not connected to borgstack_external network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_n8n_data"; then
            echo "✅ Volume follows borgstack_ naming convention"
          else
            echo "❌ Volume does not follow naming convention"
            exit 1
          fi

          # Verify no port exposure in production config
          if docker compose config | grep -A 50 "n8n:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ n8n has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health check is configured
          if docker compose config | grep -A 60 "n8n:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for n8n"
          else
            echo "❌ Health check not configured for n8n"
            exit 1
          fi

      - name: Verify n8n environment variables
        run: |
          echo "Verifying n8n environment variables configuration..."

          # Check database connection variables
          if docker compose config | grep -A 60 "n8n:" | grep -q "DB_TYPE: postgresdb"; then
            echo "✅ DB_TYPE set to postgresdb"
          else
            echo "❌ DB_TYPE not set correctly"
            exit 1
          fi

          if docker compose config | grep -A 60 "n8n:" | grep -q "DB_POSTGRESDB_DATABASE: n8n_db"; then
            echo "✅ DB_POSTGRESDB_DATABASE set to n8n_db"
          else
            echo "❌ DB_POSTGRESDB_DATABASE not set correctly"
            exit 1
          fi

          # Check Redis connection variables
          if docker compose config | grep -A 60 "n8n:" | grep -q "QUEUE_BULL_REDIS_HOST: redis"; then
            echo "✅ QUEUE_BULL_REDIS_HOST set to redis"
          else
            echo "❌ QUEUE_BULL_REDIS_HOST not set correctly"
            exit 1
          fi

          # Check n8n configuration variables
          if docker compose config | grep -A 60 "n8n:" | grep -q "N8N_PROTOCOL: https"; then
            echo "✅ N8N_PROTOCOL set to https"
          else
            echo "❌ N8N_PROTOCOL not set correctly"
            exit 1
          fi

          if docker compose config | grep -A 60 "n8n:" | grep -q 'N8N_BASIC_AUTH_ACTIVE:.*true'; then
            echo "✅ N8N_BASIC_AUTH_ACTIVE set to true"
          else
            echo "❌ N8N_BASIC_AUTH_ACTIVE not set correctly"
            exit 1
          fi

      - name: Verify n8n depends_on configuration
        run: |
          echo "Verifying n8n dependencies configuration..."

          # Check depends_on postgresql with service_healthy
          if docker compose config | grep -A 80 "n8n:" | grep -A 3 "depends_on:" | grep -A 1 "postgresql:" | grep -q "condition: service_healthy"; then
            echo "✅ n8n depends on PostgreSQL with service_healthy condition"
          else
            echo "❌ n8n PostgreSQL dependency not configured correctly"
            exit 1
          fi

          # Check depends_on redis with service_healthy
          if docker compose config | grep -A 80 "n8n:" | grep -A 5 "depends_on:" | grep -A 1 "redis:" | grep -q "condition: service_healthy"; then
            echo "✅ n8n depends on Redis with service_healthy condition"
          else
            echo "❌ n8n Redis dependency not configured correctly"
            exit 1
          fi

      - name: Verify .env.example has n8n variables
        run: |
          echo "Verifying .env.example has n8n configuration variables..."

          if grep -q "N8N_HOST=" .env.example; then
            echo "✅ N8N_HOST variable in .env.example"
          else
            echo "❌ N8N_HOST variable not found in .env.example"
            exit 1
          fi

          if grep -q "N8N_BASIC_AUTH_USER=" .env.example; then
            echo "✅ N8N_BASIC_AUTH_USER variable in .env.example"
          else
            echo "❌ N8N_BASIC_AUTH_USER variable not found in .env.example"
            exit 1
          fi

          if grep -q "N8N_BASIC_AUTH_PASSWORD=" .env.example; then
            echo "✅ N8N_BASIC_AUTH_PASSWORD variable in .env.example"
          else
            echo "❌ N8N_BASIC_AUTH_PASSWORD variable not found in .env.example"
            exit 1
          fi

          if grep -q "N8N_ENCRYPTION_KEY=" .env.example; then
            echo "✅ N8N_ENCRYPTION_KEY variable in .env.example"
          else
            echo "❌ N8N_ENCRYPTION_KEY variable not found in .env.example"
            exit 1
          fi

          if grep -q "N8N_DB_PASSWORD=" .env.example; then
            echo "✅ N8N_DB_PASSWORD variable in .env.example"
          else
            echo "❌ N8N_DB_PASSWORD variable not found in .env.example"
            exit 1
          fi

      - name: Verify example workflows exist
        run: |
          echo "Verifying n8n example workflows exist..."

          if [ -f "config/n8n/workflows/01-webhook-test.json" ]; then
            echo "✅ 01-webhook-test.json exists"
          else
            echo "❌ 01-webhook-test.json not found"
            exit 1
          fi

          if [ -f "config/n8n/workflows/02-schedule-test.json" ]; then
            echo "✅ 02-schedule-test.json exists"
          else
            echo "❌ 02-schedule-test.json not found"
            exit 1
          fi

          if [ -f "config/n8n/workflows/README.md" ]; then
            echo "✅ workflows/README.md exists"
          else
            echo "❌ workflows/README.md not found"
            exit 1
          fi

      - name: Verify n8n validation test script exists
        run: |
          echo "Verifying n8n validation test script exists..."

          if [ -f "tests/deployment/verify-n8n.sh" ]; then
            echo "✅ verify-n8n.sh exists"
          else
            echo "❌ verify-n8n.sh not found"
            exit 1
          fi

          if [ -x "tests/deployment/verify-n8n.sh" ]; then
            echo "✅ verify-n8n.sh is executable"
          else
            echo "❌ verify-n8n.sh is not executable"
            exit 1
          fi

      - name: Run n8n validation tests
        timeout-minutes: 15
        run: |
          echo "Running comprehensive n8n validation tests..."
          chmod +x tests/deployment/verify-n8n.sh
          bash tests/deployment/verify-n8n.sh

      - name: Cleanup n8n test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-evolution:
    name: Validate Evolution API Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          # PostgreSQL passwords
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          # MongoDB passwords
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          # Redis password
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          # Domain and email
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          CORS_ALLOWED_ORIGINS=*
          # n8n configuration
          N8N_HOST=n8n.example.com.br
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_auth_password_12345678
          N8N_ENCRYPTION_KEY=test_n8n_encryption_key_12345678901234567890
          # Chatwoot configuration
          CHATWOOT_HOST=chatwoot.example.com.br
          CHATWOOT_SECRET_KEY_BASE=test_chatwoot_secret_key_base_128_character_hex_string_0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef123456789
          CHATWOOT_API_TOKEN=test_chatwoot_api_token_dummy_for_ci
          # Evolution API configuration
          EVOLUTION_HOST=evolution.example.com.br
          EVOLUTION_API_KEY=test_evolution_api_key_12345678
          EVOLUTION_WEBHOOK_URL=https://n8n.example.com.br/webhook/whatsapp-incoming
          DATABASE_CONNECTION_CLIENT_NAME=evolution_api
          # Lowcoder configuration
          LOWCODER_HOST=lowcoder.example.com.br
          LOWCODER_ADMIN_EMAIL=admin@example.com.br
          LOWCODER_ADMIN_PASSWORD=test_lowcoder_admin_password_12345678
          LOWCODER_ENCRYPTION_PASSWORD=test_lowcoder_encryption_pass_123456
          LOWCODER_ENCRYPTION_SALT=test_lowcoder_encryption_salt_123456
          # Directus configuration
          DIRECTUS_HOST=directus.example.com.br
          DIRECTUS_KEY=test_directus_key_12345678901234567890123456789012
          DIRECTUS_SECRET=test_directus_secret_12345678901234567890123456
          DIRECTUS_ADMIN_EMAIL=admin@example.com.br
          DIRECTUS_ADMIN_PASSWORD=test_directus_admin_password_12345678
          EOF

      - name: Verify Evolution API configuration in docker-compose.yml
        run: |
          echo "Verifying Evolution API service is configured..."

          # Check Evolution API image version is pinned correctly
          if docker compose config | grep -q "image: atendai/evolution-api:v2.2.3"; then
            echo "✅ Evolution API image correctly configured (atendai/evolution-api:v2.2.3)"
          else
            echo "❌ Evolution API image not configured correctly"
            exit 1
          fi

          # Check Evolution API is on both networks
          if docker compose config | grep -A 50 "evolution:" | grep -q "borgstack_internal"; then
            echo "✅ Evolution API connected to borgstack_internal network"
          else
            echo "❌ Evolution API not connected to borgstack_internal network"
            exit 1
          fi

          if docker compose config | grep -A 50 "evolution:" | grep -q "borgstack_external"; then
            echo "✅ Evolution API connected to borgstack_external network"
          else
            echo "❌ Evolution API not connected to borgstack_external network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_evolution_instances"; then
            echo "✅ Volume follows borgstack_ naming convention"
          else
            echo "❌ Volume does not follow naming convention"
            exit 1
          fi

          # Verify no port exposure in production config
          if docker compose config | grep -A 50 "evolution:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ Evolution API has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health check is configured
          if docker compose config | grep -A 60 "evolution:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Evolution API"
          else
            echo "❌ Health check not configured for Evolution API"
            exit 1
          fi

      - name: Verify Evolution API environment variables
        run: |
          echo "Verifying Evolution API environment variables configuration..."

          # Check database connection variables
          if docker compose config | grep -A 60 "evolution:" | grep -q "DATABASE_URL.*postgresql://evolution_user"; then
            echo "✅ DATABASE_URL configured for evolution_user"
          else
            echo "❌ DATABASE_URL not configured correctly"
            exit 1
          fi

          # Check Redis connection variables
          if docker compose config | grep -A 60 "evolution:" | grep -q "REDIS_URI.*redis://"; then
            echo "✅ REDIS_URI configured"
          else
            echo "❌ REDIS_URI not configured correctly"
            exit 1
          fi

          # Check authentication variables
          if docker compose config | grep -A 60 "evolution:" | grep -q "AUTHENTICATION_API_KEY"; then
            echo "✅ AUTHENTICATION_API_KEY configured"
          else
            echo "❌ AUTHENTICATION_API_KEY not configured"
            exit 1
          fi

          # Check webhook configuration
          if docker compose config | grep -A 60 "evolution:" | grep -q "WEBHOOK_GLOBAL_URL"; then
            echo "✅ WEBHOOK_GLOBAL_URL configured"
          else
            echo "❌ WEBHOOK_GLOBAL_URL not configured"
            exit 1
          fi

      - name: Verify Evolution API depends_on configuration
        run: |
          echo "Verifying Evolution API service dependencies..."

          # Check PostgreSQL dependency
          if docker compose config | grep -A 80 "evolution:" | grep -A 10 "depends_on:" | grep -q "postgresql:"; then
            echo "✅ Evolution API depends on postgresql"
          else
            echo "❌ Evolution API missing postgresql dependency"
            exit 1
          fi

          # Check Redis dependency
          if docker compose config | grep -A 80 "evolution:" | grep -A 10 "depends_on:" | grep -q "redis:"; then
            echo "✅ Evolution API depends on redis"
          else
            echo "❌ Evolution API missing redis dependency"
            exit 1
          fi

      - name: Verify Evolution API .env.example variables
        run: |
          echo "Verifying Evolution API variables in .env.example..."

          if grep -q "EVOLUTION_HOST=" .env.example; then
            echo "✅ EVOLUTION_HOST variable in .env.example"
          else
            echo "❌ EVOLUTION_HOST variable not found in .env.example"
            exit 1
          fi

          if grep -q "EVOLUTION_API_KEY=" .env.example; then
            echo "✅ EVOLUTION_API_KEY variable in .env.example"
          else
            echo "❌ EVOLUTION_API_KEY variable not found in .env.example"
            exit 1
          fi

          if grep -q "EVOLUTION_DB_PASSWORD=" .env.example; then
            echo "✅ EVOLUTION_DB_PASSWORD variable in .env.example"
          else
            echo "❌ EVOLUTION_DB_PASSWORD variable not found in .env.example"
            exit 1
          fi

          if grep -q "EVOLUTION_WEBHOOK_URL=" .env.example; then
            echo "✅ EVOLUTION_WEBHOOK_URL variable in .env.example"
          else
            echo "❌ EVOLUTION_WEBHOOK_URL variable not found in .env.example"
            exit 1
          fi

      - name: Verify Evolution API validation test script exists
        run: |
          echo "Verifying Evolution API validation test script exists..."

          if [ -f "tests/deployment/verify-evolution.sh" ]; then
            echo "✅ verify-evolution.sh exists"
          else
            echo "❌ verify-evolution.sh not found"
            exit 1
          fi

          if [ -x "tests/deployment/verify-evolution.sh" ]; then
            echo "✅ verify-evolution.sh is executable"
          else
            echo "❌ verify-evolution.sh is not executable"
            exit 1
          fi

      - name: Verify Evolution API documentation exists
        run: |
          echo "Verifying Evolution API documentation exists..."

          if [ -f "config/evolution/README.md" ]; then
            echo "✅ config/evolution/README.md exists"
          else
            echo "❌ config/evolution/README.md not found"
            exit 1
          fi

      - name: Run Evolution API validation tests
        timeout-minutes: 15
        run: |
          echo "Running comprehensive Evolution API validation tests..."
          chmod +x tests/deployment/verify-evolution.sh
          bash tests/deployment/verify-evolution.sh

      - name: Cleanup Evolution API test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-chatwoot:
    name: Validate Chatwoot Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          # PostgreSQL passwords
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          # MongoDB passwords
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          # Redis password
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          # Domain and email
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          CORS_ALLOWED_ORIGINS=*
          # n8n configuration
          N8N_HOST=n8n.example.com.br
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_auth_password_12345678
          N8N_ENCRYPTION_KEY=test_n8n_encryption_key_12345678901234567890
          # Chatwoot configuration
          CHATWOOT_HOST=chatwoot.example.com.br
          CHATWOOT_SECRET_KEY_BASE=test_chatwoot_secret_key_base_128_character_hex_string_0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef123456789
          CHATWOOT_API_TOKEN=test_chatwoot_api_token_dummy_for_ci
          # Evolution API configuration
          EVOLUTION_HOST=evolution.example.com.br
          EVOLUTION_API_KEY=test_evolution_api_key_12345678
          EVOLUTION_WEBHOOK_URL=https://n8n.example.com.br/webhook/whatsapp-incoming
          DATABASE_CONNECTION_CLIENT_NAME=evolution_api
          # Lowcoder configuration
          LOWCODER_HOST=lowcoder.example.com.br
          LOWCODER_ADMIN_EMAIL=admin@example.com.br
          LOWCODER_ADMIN_PASSWORD=test_lowcoder_admin_password_12345678
          LOWCODER_ENCRYPTION_PASSWORD=test_lowcoder_encryption_pass_123456
          LOWCODER_ENCRYPTION_SALT=test_lowcoder_encryption_salt_123456
          # Directus configuration
          DIRECTUS_HOST=directus.example.com.br
          DIRECTUS_KEY=test_directus_key_12345678901234567890123456789012
          DIRECTUS_SECRET=test_directus_secret_12345678901234567890123456
          DIRECTUS_ADMIN_EMAIL=admin@example.com.br
          DIRECTUS_ADMIN_PASSWORD=test_directus_admin_password_12345678
          EOF

      - name: Verify Chatwoot configuration in docker-compose.yml
        run: |
          echo "Verifying Chatwoot service is configured..."

          # Check Chatwoot image version is pinned correctly
          if docker compose config | grep -q "image: chatwoot/chatwoot:v4.6.0-ce"; then
            echo "✅ Chatwoot image correctly configured (chatwoot/chatwoot:v4.6.0-ce)"
          else
            echo "❌ Chatwoot image not configured correctly"
            exit 1
          fi

          # Check Chatwoot is on both networks (internal for DB/Redis, external for Caddy)
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "borgstack_internal"; then
            echo "✅ Chatwoot connected to borgstack_internal network"
          else
            echo "❌ Chatwoot not connected to borgstack_internal network"
            exit 1
          fi

          if docker compose config | grep -A 70 "chatwoot:" | grep -q "borgstack_external"; then
            echo "✅ Chatwoot connected to borgstack_external network"
          else
            echo "❌ Chatwoot not connected to borgstack_external network"
            exit 1
          fi

          # Verify volume naming convention (both storage and public volumes)
          if docker compose config | grep -q "borgstack_chatwoot_storage"; then
            echo "✅ Volume borgstack_chatwoot_storage follows naming convention"
          else
            echo "❌ Volume borgstack_chatwoot_storage does not follow naming convention"
            exit 1
          fi

          if docker compose config | grep -q "borgstack_chatwoot_public"; then
            echo "✅ Volume borgstack_chatwoot_public follows naming convention"
          else
            echo "❌ Volume borgstack_chatwoot_public does not follow naming convention"
            exit 1
          fi

          # Verify no port exposure in production config
          if docker compose config | grep -A 70 "chatwoot:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ Chatwoot has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health check is configured
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Chatwoot"
          else
            echo "❌ Health check not configured for Chatwoot"
            exit 1
          fi

      - name: Verify Chatwoot environment variables
        run: |
          echo "Verifying Chatwoot environment variables configuration..."

          # Check DATABASE_URL connection string
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "DATABASE_URL:.*postgresql://chatwoot_user:.*@postgresql:5432/chatwoot_db"; then
            echo "✅ DATABASE_URL configured correctly"
          else
            echo "❌ DATABASE_URL not configured correctly"
            exit 1
          fi

          # Check Redis connection
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "REDIS_URL:.*redis://"; then
            echo "✅ REDIS_URL configured correctly"
          else
            echo "❌ REDIS_URL not configured correctly"
            exit 1
          fi

          # Check SECRET_KEY_BASE is set
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "SECRET_KEY_BASE:"; then
            echo "✅ SECRET_KEY_BASE configured"
          else
            echo "❌ SECRET_KEY_BASE not configured"
            exit 1
          fi

          # Check FRONTEND_URL is set
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "FRONTEND_URL:"; then
            echo "✅ FRONTEND_URL configured"
          else
            echo "❌ FRONTEND_URL not configured"
            exit 1
          fi

          # Check RAILS_ENV is production
          if docker compose config | grep -A 70 "chatwoot:" | grep -q "RAILS_ENV: production"; then
            echo "✅ RAILS_ENV set to production"
          else
            echo "❌ RAILS_ENV not set to production"
            exit 1
          fi

      - name: Verify Chatwoot depends_on configuration
        run: |
          echo "Verifying Chatwoot dependency configuration..."

          # Check PostgreSQL dependency
          if docker compose config | grep -A 80 "chatwoot:" | grep -A 5 "depends_on:" | grep -q "postgresql:"; then
            echo "✅ Chatwoot depends on PostgreSQL"
          else
            echo "❌ Chatwoot missing PostgreSQL dependency"
            exit 1
          fi

          # Check Redis dependency
          if docker compose config | grep -A 80 "chatwoot:" | grep -A 10 "depends_on:" | grep -q "redis:"; then
            echo "✅ Chatwoot depends on Redis"
          else
            echo "❌ Chatwoot missing Redis dependency"
            exit 1
          fi

      - name: Verify Chatwoot validation test exists
        run: |
          echo "Verifying Chatwoot validation test script exists..."

          if [ -f "tests/deployment/verify-chatwoot.sh" ]; then
            echo "✅ tests/deployment/verify-chatwoot.sh exists"
          else
            echo "❌ tests/deployment/verify-chatwoot.sh not found"
            exit 1
          fi

          if [ -x "tests/deployment/verify-chatwoot.sh" ]; then
            echo "✅ verify-chatwoot.sh is executable"
          else
            echo "❌ verify-chatwoot.sh is not executable"
            exit 1
          fi

      - name: Verify Chatwoot documentation exists
        run: |
          echo "Verifying Chatwoot documentation exists..."

          if [ -f "config/chatwoot/README.md" ]; then
            echo "✅ config/chatwoot/README.md exists"
          else
            echo "❌ config/chatwoot/README.md not found"
            exit 1
          fi

      - name: Run Chatwoot validation tests
        timeout-minutes: 15
        run: |
          echo "Running comprehensive Chatwoot validation tests..."
          chmod +x tests/deployment/verify-chatwoot.sh
          bash tests/deployment/verify-chatwoot.sh

      - name: Cleanup Chatwoot test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-lowcoder:
    name: Validate Lowcoder Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          # PostgreSQL passwords
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          # MongoDB passwords
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          # Redis password
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          # Domain and email
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          CORS_ALLOWED_ORIGINS=*
          # n8n configuration
          N8N_HOST=n8n.example.com.br
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_auth_password_12345678
          N8N_ENCRYPTION_KEY=test_n8n_encryption_key_12345678901234567890
          # Chatwoot configuration
          CHATWOOT_HOST=chatwoot.example.com.br
          CHATWOOT_SECRET_KEY_BASE=test_chatwoot_secret_key_base_128_character_hex_string_0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef123456789
          CHATWOOT_API_TOKEN=test_chatwoot_api_token_dummy_for_ci
          # Evolution API configuration
          EVOLUTION_HOST=evolution.example.com.br
          EVOLUTION_API_KEY=test_evolution_api_key_12345678
          EVOLUTION_WEBHOOK_URL=https://n8n.example.com.br/webhook/whatsapp-incoming
          DATABASE_CONNECTION_CLIENT_NAME=evolution_api
          # Lowcoder configuration
          LOWCODER_HOST=lowcoder.example.com.br
          LOWCODER_ADMIN_EMAIL=admin@example.com.br
          LOWCODER_ADMIN_PASSWORD=test_lowcoder_admin_password_12345678
          LOWCODER_ENCRYPTION_PASSWORD=test_lowcoder_encryption_pass_123456
          LOWCODER_ENCRYPTION_SALT=test_lowcoder_encryption_salt_123456
          # Directus configuration
          DIRECTUS_HOST=directus.example.com.br
          DIRECTUS_KEY=test_directus_key_12345678901234567890123456789012
          DIRECTUS_SECRET=test_directus_secret_12345678901234567890123456
          DIRECTUS_ADMIN_EMAIL=admin@example.com.br
          DIRECTUS_ADMIN_PASSWORD=test_directus_admin_password_12345678
          EOF

      - name: Verify Lowcoder configuration in docker-compose.yml
        run: |
          echo "Verifying Lowcoder multi-service architecture is configured..."

          # Check Lowcoder API Service image version is pinned correctly
          if docker compose config | grep -q "image: lowcoderorg/lowcoder-ce-api-service:2.7.4"; then
            echo "✅ Lowcoder API Service image correctly configured (lowcoderorg/lowcoder-ce-api-service:2.7.4)"
          else
            echo "❌ Lowcoder API Service image not configured correctly"
            exit 1
          fi

          # Check Lowcoder Node Service image version is pinned correctly
          if docker compose config | grep -q "image: lowcoderorg/lowcoder-ce-node-service:2.7.4"; then
            echo "✅ Lowcoder Node Service image correctly configured (lowcoderorg/lowcoder-ce-node-service:2.7.4)"
          else
            echo "❌ Lowcoder Node Service image not configured correctly"
            exit 1
          fi

          # Check Lowcoder Frontend image version is pinned correctly
          if docker compose config | grep -q "image: lowcoderorg/lowcoder-ce-frontend:2.7.4"; then
            echo "✅ Lowcoder Frontend image correctly configured (lowcoderorg/lowcoder-ce-frontend:2.7.4)"
          else
            echo "❌ Lowcoder Frontend image not configured correctly"
            exit 1
          fi

          # Check Lowcoder API Service is on borgstack_internal network
          if docker compose config | grep -A 50 "lowcoder-api-service:" | grep -q "borgstack_internal"; then
            echo "✅ Lowcoder API Service connected to borgstack_internal network"
          else
            echo "❌ Lowcoder API Service not connected to borgstack_internal network"
            exit 1
          fi

          # Check Lowcoder Frontend is on both networks (internal + external for Caddy)
          if docker compose config | grep -A 50 "lowcoder-frontend:" | grep -q "borgstack_internal"; then
            echo "✅ Lowcoder Frontend connected to borgstack_internal network"
          else
            echo "❌ Lowcoder Frontend not connected to borgstack_internal network"
            exit 1
          fi

          if docker compose config | grep -A 50 "lowcoder-frontend:" | grep -q "borgstack_external"; then
            echo "✅ Lowcoder Frontend connected to borgstack_external network"
          else
            echo "❌ Lowcoder Frontend not connected to borgstack_external network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_lowcoder_stacks"; then
            echo "✅ Volume borgstack_lowcoder_stacks follows naming convention"
          else
            echo "❌ Volume borgstack_lowcoder_stacks missing"
            exit 1
          fi

          # Verify no port exposure in production config for all Lowcoder services
          if docker compose config | grep -A 50 "lowcoder-api-service:\|lowcoder-node-service:\|lowcoder-frontend:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ Lowcoder has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health checks are configured for all services
          if docker compose config | grep -A 30 "lowcoder-api-service:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Lowcoder API Service"
          else
            echo "❌ Health check not configured for Lowcoder API Service"
            exit 1
          fi

          if docker compose config | grep -A 30 "lowcoder-node-service:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Lowcoder Node Service"
          else
            echo "❌ Health check not configured for Lowcoder Node Service"
            exit 1
          fi

          if docker compose config | grep -A 30 "lowcoder-frontend:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Lowcoder Frontend"
          else
            echo "❌ Health check not configured for Lowcoder Frontend"
            exit 1
          fi

      - name: Verify Lowcoder environment variables
        run: |
          echo "Verifying Lowcoder environment variables configuration..."

          # ===================================================================
          # Lowcoder API Service Environment Variables
          # ===================================================================
          echo "Checking Lowcoder API Service environment variables..."

          # Check MongoDB connection string
          if docker compose config | grep -A 50 "lowcoder-api-service:" | grep "LOWCODER_MONGODB_URL" | grep -q "mongodb://lowcoder_user:.*@mongodb:27017/lowcoder?authSource=lowcoder"; then
            echo "✅ LOWCODER_MONGODB_URL configured correctly in API service"
          else
            echo "❌ LOWCODER_MONGODB_URL not configured correctly in API service"
            exit 1
          fi

          # Check Redis connection string
          if docker compose config | grep -A 50 "lowcoder-api-service:" | grep "LOWCODER_REDIS_URL" | grep -q "redis://"; then
            echo "✅ LOWCODER_REDIS_URL configured correctly in API service"
          else
            echo "❌ LOWCODER_REDIS_URL not configured correctly in API service"
            exit 1
          fi

          # Check encryption keys in API service
          if docker compose config | grep -A 50 "lowcoder-api-service:" | grep -q "LOWCODER_DB_ENCRYPTION_PASSWORD:"; then
            echo "✅ LOWCODER_DB_ENCRYPTION_PASSWORD configured in API service"
          else
            echo "❌ LOWCODER_DB_ENCRYPTION_PASSWORD not configured in API service"
            exit 1
          fi

          if docker compose config | grep -A 50 "lowcoder-api-service:" | grep -q "LOWCODER_DB_ENCRYPTION_SALT:"; then
            echo "✅ LOWCODER_DB_ENCRYPTION_SALT configured in API service"
          else
            echo "❌ LOWCODER_DB_ENCRYPTION_SALT not configured in API service"
            exit 1
          fi

          # ===================================================================
          # Lowcoder Node Service Environment Variables
          # ===================================================================
          echo "Checking Lowcoder Node Service environment variables..."

          # Check API service URL
          if docker compose config | grep -A 30 "lowcoder-node-service:" | grep "LOWCODER_API_SERVICE_URL" | grep -q "http://lowcoder-api-service:8080"; then
            echo "✅ LOWCODER_API_SERVICE_URL configured correctly in Node service"
          else
            echo "❌ LOWCODER_API_SERVICE_URL not configured correctly in Node service"
            exit 1
          fi

          # ===================================================================
          # Lowcoder Frontend Environment Variables
          # ===================================================================
          echo "Checking Lowcoder Frontend environment variables..."

          # Check API service URL
          if docker compose config | grep -A 30 "lowcoder-frontend:" | grep "LOWCODER_API_SERVICE_URL" | grep -q "http://lowcoder-api-service:8080"; then
            echo "✅ LOWCODER_API_SERVICE_URL configured correctly in Frontend"
          else
            echo "❌ LOWCODER_API_SERVICE_URL not configured correctly in Frontend"
            exit 1
          fi

          # Check Node service URL
          if docker compose config | grep -A 30 "lowcoder-frontend:" | grep "LOWCODER_NODE_SERVICE_URL" | grep -q "http://lowcoder-node-service:6060"; then
            echo "✅ LOWCODER_NODE_SERVICE_URL configured correctly in Frontend"
          else
            echo "❌ LOWCODER_NODE_SERVICE_URL not configured correctly in Frontend"
            exit 1
          fi

      - name: Verify Lowcoder depends_on configuration
        run: |
          echo "Verifying Lowcoder dependency configuration..."

          # ===================================================================
          # Lowcoder API Service Dependencies
          # ===================================================================
          echo "Checking Lowcoder API Service dependencies..."

          # Check MongoDB dependency
          if docker compose config | grep -A 80 "lowcoder-api-service:" | grep -A 10 "depends_on:" | grep -q "mongodb:"; then
            echo "✅ Lowcoder API Service depends on MongoDB"
          else
            echo "❌ Lowcoder API Service missing MongoDB dependency"
            exit 1
          fi

          # Check Redis dependency
          if docker compose config | grep -A 80 "lowcoder-api-service:" | grep -A 10 "depends_on:" | grep -q "redis:"; then
            echo "✅ Lowcoder API Service depends on Redis"
          else
            echo "❌ Lowcoder API Service missing Redis dependency"
            exit 1
          fi

          # ===================================================================
          # Lowcoder Node Service Dependencies
          # ===================================================================
          echo "Checking Lowcoder Node Service dependencies..."

          # Check API Service dependency
          if docker compose config | grep -A 80 "lowcoder-node-service:" | grep -A 10 "depends_on:" | grep -q "lowcoder-api-service:"; then
            echo "✅ Lowcoder Node Service depends on Lowcoder API Service"
          else
            echo "❌ Lowcoder Node Service missing Lowcoder API Service dependency"
            exit 1
          fi

          # ===================================================================
          # Lowcoder Frontend Dependencies
          # ===================================================================
          echo "Checking Lowcoder Frontend dependencies..."

          # Check API Service dependency
          if docker compose config | grep -A 80 "lowcoder-frontend:" | grep -A 15 "depends_on:" | grep -q "lowcoder-api-service:"; then
            echo "✅ Lowcoder Frontend depends on Lowcoder API Service"
          else
            echo "❌ Lowcoder Frontend missing Lowcoder API Service dependency"
            exit 1
          fi

          # Check Node Service dependency
          if docker compose config | grep -A 80 "lowcoder-frontend:" | grep -A 15 "depends_on:" | grep -q "lowcoder-node-service:"; then
            echo "✅ Lowcoder Frontend depends on Lowcoder Node Service"
          else
            echo "❌ Lowcoder Frontend missing Lowcoder Node Service dependency"
            exit 1
          fi

      - name: Verify Lowcoder validation test exists
        run: |
          echo "Verifying Lowcoder validation test script exists..."

          if [ -f "tests/deployment/verify-lowcoder.sh" ]; then
            echo "✅ tests/deployment/verify-lowcoder.sh exists"
          else
            echo "❌ tests/deployment/verify-lowcoder.sh not found"
            exit 1
          fi

          if [ -x "tests/deployment/verify-lowcoder.sh" ]; then
            echo "✅ verify-lowcoder.sh is executable"
          else
            echo "❌ verify-lowcoder.sh is not executable"
            exit 1
          fi

      - name: Verify Lowcoder documentation exists
        run: |
          echo "Verifying Lowcoder documentation exists..."

          if [ -f "config/lowcoder/README.md" ]; then
            echo "✅ config/lowcoder/README.md exists"
          else
            echo "❌ config/lowcoder/README.md not found"
            exit 1
          fi

      - name: Verify Lowcoder .env.example variables
        run: |
          echo "Verifying Lowcoder variables in .env.example..."

          if grep -q "LOWCODER_HOST=" .env.example; then
            echo "✅ LOWCODER_HOST variable in .env.example"
          else
            echo "❌ LOWCODER_HOST variable not found in .env.example"
            exit 1
          fi

          if grep -q "LOWCODER_ADMIN_EMAIL=" .env.example; then
            echo "✅ LOWCODER_ADMIN_EMAIL variable in .env.example"
          else
            echo "❌ LOWCODER_ADMIN_EMAIL variable not found in .env.example"
            exit 1
          fi

          if grep -q "LOWCODER_ADMIN_PASSWORD=" .env.example; then
            echo "✅ LOWCODER_ADMIN_PASSWORD variable in .env.example"
          else
            echo "❌ LOWCODER_ADMIN_PASSWORD variable not found in .env.example"
            exit 1
          fi

          if grep -q "LOWCODER_ENCRYPTION_PASSWORD=" .env.example; then
            echo "✅ LOWCODER_ENCRYPTION_PASSWORD variable in .env.example"
          else
            echo "❌ LOWCODER_ENCRYPTION_PASSWORD variable not found in .env.example"
            exit 1
          fi

          if grep -q "LOWCODER_ENCRYPTION_SALT=" .env.example; then
            echo "✅ LOWCODER_ENCRYPTION_SALT variable in .env.example"
          else
            echo "❌ LOWCODER_ENCRYPTION_SALT variable not found in .env.example"
            exit 1
          fi

      - name: Run Lowcoder validation tests
        timeout-minutes: 15
        run: |
          echo "Running comprehensive Lowcoder validation tests..."
          chmod +x tests/deployment/verify-lowcoder.sh
          bash tests/deployment/verify-lowcoder.sh

      - name: Cleanup Lowcoder test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  validate-directus:
    name: Validate Directus Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          # PostgreSQL passwords
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          # MongoDB passwords
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678
          LOWCODER_DB_PASSWORD=test_lowcoder_password_12345678901234567890
          # Redis password
          REDIS_PASSWORD=test_redis_password_12345678901234567890
          # Domain and email
          DOMAIN=example.com.br
          EMAIL=admin@example.com.br
          CORS_ALLOWED_ORIGINS=*
          # n8n configuration
          N8N_HOST=n8n.example.com.br
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_auth_password_12345678
          N8N_ENCRYPTION_KEY=test_n8n_encryption_key_12345678901234567890
          # Chatwoot configuration
          CHATWOOT_HOST=chatwoot.example.com.br
          CHATWOOT_SECRET_KEY_BASE=test_chatwoot_secret_key_base_128_character_hex_string_0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef123456789
          CHATWOOT_API_TOKEN=test_chatwoot_api_token_dummy_for_ci
          # Evolution API configuration
          EVOLUTION_HOST=evolution.example.com.br
          EVOLUTION_API_KEY=test_evolution_api_key_12345678
          EVOLUTION_WEBHOOK_URL=https://n8n.example.com.br/webhook/whatsapp-incoming
          DATABASE_CONNECTION_CLIENT_NAME=evolution_api
          # Lowcoder configuration
          LOWCODER_HOST=lowcoder.example.com.br
          LOWCODER_ADMIN_EMAIL=admin@example.com.br
          LOWCODER_ADMIN_PASSWORD=test_lowcoder_admin_password_12345678
          LOWCODER_ENCRYPTION_PASSWORD=test_lowcoder_encryption_pass_123456
          LOWCODER_ENCRYPTION_SALT=test_lowcoder_encryption_salt_123456
          # Directus configuration
          DIRECTUS_HOST=directus.example.com.br
          DIRECTUS_KEY=test_directus_key_12345678901234567890123456789012
          DIRECTUS_SECRET=test_directus_secret_12345678901234567890123456
          DIRECTUS_ADMIN_EMAIL=admin@example.com.br
          DIRECTUS_ADMIN_PASSWORD=test_directus_admin_password_12345678
          EOF

      - name: Verify Directus configuration in docker-compose.yml
        run: |
          echo "Verifying Directus service is configured..."

          # Check Directus image version is pinned correctly
          if docker compose config | grep -q "image: directus/directus:11"; then
            echo "✅ Directus image correctly configured (directus/directus:11)"
          else
            echo "❌ Directus image not configured correctly"
            exit 1
          fi

          # Check Directus is on both networks (internal for DB/Redis, external for Caddy)
          if docker compose config | grep -A 50 "directus:" | grep -q "borgstack_internal"; then
            echo "✅ Directus connected to borgstack_internal network"
          else
            echo "❌ Directus not connected to borgstack_internal network"
            exit 1
          fi

          if docker compose config | grep -A 50 "directus:" | grep -q "borgstack_external"; then
            echo "✅ Directus connected to borgstack_external network"
          else
            echo "❌ Directus not connected to borgstack_external network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_directus_uploads"; then
            echo "✅ Volume borgstack_directus_uploads follows naming convention"
          else
            echo "❌ Volume borgstack_directus_uploads not found"
            exit 1
          fi

          # Verify no port exposure in production config
          if docker compose config | grep -A 50 "directus:" | grep -E "^\s+ports:" > /dev/null 2>&1; then
            echo "❌ Directus has port exposure in production config (security violation)"
            exit 1
          else
            echo "✅ No port exposure to host (security requirement met)"
          fi

          # Verify health check is configured
          if docker compose config | grep -A 60 "directus:" | grep -q "healthcheck:"; then
            echo "✅ Health check configured for Directus"
          else
            echo "❌ Health check not configured for Directus"
            exit 1
          fi

      - name: Verify Directus environment variables
        run: |
          echo "Verifying Directus environment variables configuration..."

          # Check DATABASE_URL connection string
          if docker compose config | grep -A 60 "directus:" | grep -q "DB_CLIENT: pg"; then
            echo "✅ DB_CLIENT set to pg (PostgreSQL)"
          else
            echo "❌ DB_CLIENT not configured correctly"
            exit 1
          fi

          # Check Redis connection
          if docker compose config | grep -A 60 "directus:" | grep -q "REDIS_HOST:"; then
            echo "✅ REDIS configured for caching"
          else
            echo "❌ REDIS not configured"
            exit 1
          fi

          # Check KEY and SECRET are set
          if docker compose config | grep -A 60 "directus:" | grep -q "KEY:"; then
            echo "✅ KEY configured"
          else
            echo "❌ KEY not configured"
            exit 1
          fi

          if docker compose config | grep -A 60 "directus:" | grep -q "SECRET:"; then
            echo "✅ SECRET configured"
          else
            echo "❌ SECRET not configured"
            exit 1
          fi

          # Check admin credentials
          if docker compose config | grep -A 60 "directus:" | grep -q "ADMIN_EMAIL:"; then
            echo "✅ ADMIN_EMAIL configured"
          else
            echo "❌ ADMIN_EMAIL not configured"
            exit 1
          fi

          if docker compose config | grep -A 60 "directus:" | grep -q "ADMIN_PASSWORD:"; then
            echo "✅ ADMIN_PASSWORD configured"
          else
            echo "❌ ADMIN_PASSWORD not configured"
            exit 1
          fi

      - name: Verify Directus depends_on configuration
        run: |
          echo "Verifying Directus dependency configuration..."

          # Check PostgreSQL dependency
          if docker compose config | grep -A 80 "directus:" | grep -A 5 "depends_on:" | grep -q "postgresql:"; then
            echo "✅ Directus depends on PostgreSQL"
          else
            echo "❌ Directus missing PostgreSQL dependency"
            exit 1
          fi

          # Check Redis dependency
          if docker compose config | grep -A 80 "directus:" | grep -A 10 "depends_on:" | grep -q "redis:"; then
            echo "✅ Directus depends on Redis"
          else
            echo "❌ Directus missing Redis dependency"
            exit 1
          fi

      - name: Verify Directus .env.example variables
        run: |
          echo "Verifying Directus variables in .env.example..."

          if grep -q "DIRECTUS_HOST=" .env.example; then
            echo "✅ DIRECTUS_HOST variable in .env.example"
          else
            echo "❌ DIRECTUS_HOST variable not found in .env.example"
            exit 1
          fi

          if grep -q "DIRECTUS_KEY=" .env.example; then
            echo "✅ DIRECTUS_KEY variable in .env.example"
          else
            echo "❌ DIRECTUS_KEY variable not found in .env.example"
            exit 1
          fi

          if grep -q "DIRECTUS_SECRET=" .env.example; then
            echo "✅ DIRECTUS_SECRET variable in .env.example"
          else
            echo "❌ DIRECTUS_SECRET variable not found in .env.example"
            exit 1
          fi

          if grep -q "DIRECTUS_ADMIN_EMAIL=" .env.example; then
            echo "✅ DIRECTUS_ADMIN_EMAIL variable in .env.example"
          else
            echo "❌ DIRECTUS_ADMIN_EMAIL variable not found in .env.example"
            exit 1
          fi

          if grep -q "DIRECTUS_ADMIN_PASSWORD=" .env.example; then
            echo "✅ DIRECTUS_ADMIN_PASSWORD variable in .env.example"
          else
            echo "❌ DIRECTUS_ADMIN_PASSWORD variable not found in .env.example"
            exit 1
          fi

          if grep -q "DIRECTUS_DB_PASSWORD=" .env.example; then
            echo "✅ DIRECTUS_DB_PASSWORD variable in .env.example"
          else
            echo "❌ DIRECTUS_DB_PASSWORD variable not found in .env.example"
            exit 1
          fi

      - name: Verify Directus validation test script exists
        run: |
          echo "Verifying Directus validation test script exists..."

          if [ -f "tests/deployment/verify-directus.sh" ]; then
            echo "✅ verify-directus.sh exists"
          else
            echo "❌ verify-directus.sh not found"
            exit 1
          fi

          if [ -x "tests/deployment/verify-directus.sh" ]; then
            echo "✅ verify-directus.sh is executable"
          else
            echo "❌ verify-directus.sh is not executable"
            exit 1
          fi

      - name: Run Directus validation tests
        timeout-minutes: 15
        run: |
          echo "Running comprehensive Directus validation tests..."
          chmod +x tests/deployment/verify-directus.sh
          bash tests/deployment/verify-directus.sh

      - name: Cleanup Directus test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env

  # ============================================================================
  # FUTURE SERVICES - Placeholders for Epic 4 & 5 Stories
  # ============================================================================
  # The following services will be implemented in future stories.
  # Uncomment and configure when implementing:
  # - Story 4.2: FileFlows Media Processing
  # - Story 5.1: SeaweedFS Object Storage
  # - Story 5.2: Duplicati Backup System
  # ============================================================================

  # validate-fileflows:
  #   name: Validate FileFlows Configuration
  #   runs-on: ubuntu-24.04
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Create .env file for testing
  #       run: |
  #         echo "Creating temporary .env file with test credentials..."
  #         # TODO: Add FileFlows-specific environment variables
  #
  #     - name: Verify FileFlows configuration in docker-compose.yml
  #       run: |
  #         echo "Verifying FileFlows service is configured..."
  #         # TODO: Add FileFlows configuration checks
  #
  #     - name: Run FileFlows validation tests
  #       run: |
  #         echo "Running comprehensive FileFlows validation tests..."
  #         chmod +x tests/deployment/verify-fileflows.sh
  #         bash tests/deployment/verify-fileflows.sh
  #
  #     - name: Cleanup FileFlows test environment
  #       if: always()
  #       run: |
  #         echo "Cleaning up test environment..."
  #         docker compose down -v --remove-orphans || true
  #         rm -f .env

  # validate-seaweedfs:
  #   name: Validate SeaweedFS Configuration
  #   runs-on: ubuntu-24.04
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Create .env file for testing
  #       run: |
  #         echo "Creating temporary .env file with test credentials..."
  #         # TODO: Add SeaweedFS-specific environment variables
  #
  #     - name: Verify SeaweedFS configuration in docker-compose.yml
  #       run: |
  #         echo "Verifying SeaweedFS service is configured..."
  #         # TODO: Add SeaweedFS configuration checks (S3 API, volumes, etc.)
  #
  #     - name: Run SeaweedFS validation tests
  #       run: |
  #         echo "Running comprehensive SeaweedFS validation tests..."
  #         chmod +x tests/deployment/verify-seaweedfs.sh
  #         bash tests/deployment/verify-seaweedfs.sh
  #
  #     - name: Cleanup SeaweedFS test environment
  #       if: always()
  #       run: |
  #         echo "Cleaning up test environment..."
  #         docker compose down -v --remove-orphans || true
  #         rm -f .env

  # validate-duplicati:
  #   name: Validate Duplicati Configuration
  #   runs-on: ubuntu-24.04
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Create .env file for testing
  #       run: |
  #         echo "Creating temporary .env file with test credentials..."
  #         # TODO: Add Duplicati-specific environment variables
  #
  #     - name: Verify Duplicati configuration in docker-compose.yml
  #       run: |
  #         echo "Verifying Duplicati service is configured..."
  #         # TODO: Add Duplicati configuration checks (backup sources, destinations)
  #
  #     - name: Run Duplicati validation tests
  #       run: |
  #         echo "Running comprehensive Duplicati validation tests..."
  #         chmod +x tests/deployment/verify-duplicati.sh
  #         bash tests/deployment/verify-duplicati.sh
  #
  #     - name: Cleanup Duplicati test environment
  #       if: always()
  #       run: |
  #         echo "Cleaning up test environment..."
  #         docker compose down -v --remove-orphans || true
  #         rm -f .env
