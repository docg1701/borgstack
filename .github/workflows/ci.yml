name: BorgStack CI

# Trigger CI on push to main/feature branches and pull requests
on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Validate Docker Compose files
  validate-docker-compose:
    name: Validate Docker Compose Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml syntax
        run: |
          echo "Validating main docker-compose.yml..."
          if docker compose -f docker-compose.yml config --quiet; then
            echo "✅ docker-compose.yml is valid"
          else
            echo "❌ docker-compose.yml validation failed"
            exit 1
          fi

      - name: Validate docker-compose.override.yml syntax
        run: |
          echo "Validating docker-compose.override.yml..."
          if docker compose -f docker-compose.yml -f docker-compose.override.yml config --quiet; then
            echo "✅ docker-compose.override.yml is valid"
          else
            echo "❌ docker-compose.override.yml validation failed"
            exit 1
          fi

      - name: Validate docker-compose.prod.yml syntax
        run: |
          echo "Validating docker-compose.prod.yml..."
          if docker compose -f docker-compose.yml -f docker-compose.prod.yml config --quiet; then
            echo "✅ docker-compose.prod.yml is valid"
          else
            echo "❌ docker-compose.prod.yml validation failed"
            exit 1
          fi

      - name: Check for 'latest' tags in docker-compose.yml
        run: |
          echo "Checking for 'latest' image tags (not allowed per coding standards)..."
          if grep -n "image:.*:latest" docker-compose.yml docker-compose.override.yml docker-compose.prod.yml 2>/dev/null; then
            echo "❌ Found 'latest' tag(s) in Docker Compose files"
            echo "Per coding standards, all images must use pinned versions"
            exit 1
          else
            echo "✅ No 'latest' tags found"
          fi

      - name: Verify network naming conventions
        run: |
          echo "Verifying network naming follows Docker Compose best practices..."
          INTERNAL_NAME=$(grep -A 1 "^  internal:" docker-compose.yml | grep "name:" | awk '{print $2}' || echo "")
          EXTERNAL_NAME=$(grep -A 1 "^  external:" docker-compose.yml | grep "name:" | awk '{print $2}' || echo "")

          if [ "$INTERNAL_NAME" = "borgstack_internal" ] && [ "$EXTERNAL_NAME" = "borgstack_external" ]; then
            echo "✅ Network naming conventions verified (short keys, full names in 'name:' field)"
          else
            echo "❌ Network naming incorrect. Expected: internal->borgstack_internal, external->borgstack_external"
            echo "  Found: internal->$INTERNAL_NAME, external->$EXTERNAL_NAME"
            exit 1
          fi

      - name: Verify volume naming conventions
        run: |
          echo "Verifying volume naming follows 'borgstack_' prefix convention..."
          if docker compose -f docker-compose.yml config 2>/dev/null | awk '/^volumes:/,/^[^ ]/' | grep "name:" | grep -v "name: borgstack_"; then
            echo "❌ Found volume(s) not following 'borgstack_' prefix convention"
            exit 1
          else
            echo "✅ Volume naming conventions verified"
          fi

      - name: Verify network isolation configuration
        run: |
          echo "Running network isolation verification tests..."
          chmod +x tests/deployment/verify-network-isolation.sh
          ./tests/deployment/verify-network-isolation.sh

  # Job 2: Verify repository structure
  verify-structure:
    name: Verify Repository Structure
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify required directories exist
        run: |
          echo "Verifying directory structure..."

          REQUIRED_DIRS=(
            "config"
            "config/postgresql"
            "config/mongodb"
            "config/redis"
            "config/seaweedfs"
            "config/caddy"
            "config/n8n"
            "config/chatwoot"
            "config/evolution"
            "config/duplicati"
            "scripts"
            "docs"
            "docs/03-services"
            "docs/04-integrations"
            "tests/integration"
            "tests/deployment"
            ".github/workflows"
          )

          MISSING_DIRS=()
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              MISSING_DIRS+=("$dir")
            fi
          done

          if [ ${#MISSING_DIRS[@]} -eq 0 ]; then
            echo "✅ All required directories exist"
          else
            echo "❌ Missing directories:"
            printf '%s\n' "${MISSING_DIRS[@]}"
            exit 1
          fi

      - name: Verify required root files exist
        run: |
          echo "Verifying required root files..."

          REQUIRED_FILES=(
            "docker-compose.yml"
            "docker-compose.override.yml"
            "docker-compose.prod.yml"
            ".gitignore"
            ".env.example"
            "README.md"
            "LICENSE"
          )

          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "✅ All required files exist"
          else
            echo "❌ Missing files:"
            printf '%s\n' "${MISSING_FILES[@]}"
            exit 1
          fi

      - name: Verify .env is properly ignored
        run: |
          echo "Verifying .env files are in .gitignore..."
          if grep -q "^\.env$" .gitignore && \
             grep -q "^\.env\.local$" .gitignore && \
             grep -q "^\.env\.\*\.local$" .gitignore; then
            echo "✅ .env files are properly configured in .gitignore"
          else
            echo "❌ .env files are not properly configured in .gitignore"
            exit 1
          fi

  # Job 3: Service Validation (Matrix Strategy - Replaces 13 separate jobs!)
  validate-services:
    name: Validate ${{ matrix.service }}
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        service:
          - postgresql
          - redis
          - caddy
          - mongodb
          - evolution
          - chatwoot
          - lowcoder
          - directus
          - fileflows
          - directus-fileflows
          - seaweedfs
          - duplicati
          - storage-integration

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline - DO NOT USE IN PRODUCTION

          # PostgreSQL (shared database)
          POSTGRES_PASSWORD=test_postgres_password_12345678_ci_only

          # Individual service database passwords
          N8N_DB_PASSWORD=test_n8n_password_12345678_ci_only
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678_ci_only
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678_ci_only
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678_ci_only

          # MongoDB
          MONGODB_ROOT_PASSWORD=test_mongodb_root_password_12345678_ci_only
          LOWCODER_DB_PASSWORD=test_lowcoder_db_password_12345678_ci_only
          LOWCODER_READONLY_DB_PASSWORD=test_lowcoder_readonly_password_12345678_ci_only

          # Redis
          REDIS_PASSWORD=test_redis_password_12345678_ci_only

          # Domain and Email
          DOMAIN=localhost
          EMAIL=ci-test@example.com
          CORS_ALLOWED_ORIGINS=http://localhost,http://127.0.0.1

          # Chatwoot
          CHATWOOT_HOST=localhost
          CHATWOOT_SECRET_KEY_BASE=test_chatwoot_secret_key_base_0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
          CHATWOOT_API_TOKEN=test_chatwoot_api_token_12345678

          # Evolution API
          EVOLUTION_HOST=localhost
          EVOLUTION_API_KEY=test_evolution_api_key_12345678_ci_only
          EVOLUTION_WEBHOOK_URL=http://localhost:8080/webhook
          DATABASE_CONNECTION_CLIENT_NAME=evolution_ci_test

          # Lowcoder
          LOWCODER_HOST=localhost
          LOWCODER_ADMIN_EMAIL=admin@example.com
          LOWCODER_ADMIN_PASSWORD=test_lowcoder_admin_password_12345678_ci_only
          LOWCODER_ENCRYPTION_PASSWORD=test_lowcoder_encryption_12345678_ci_only
          LOWCODER_ENCRYPTION_SALT=test_lowcoder_salt_12345678_ci_only

          # Directus
          DIRECTUS_HOST=localhost
          DIRECTUS_KEY=0123456789abcdef0123456789abcdef
          DIRECTUS_SECRET=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
          DIRECTUS_ADMIN_EMAIL=admin@example.com
          DIRECTUS_ADMIN_PASSWORD=test_directus_admin_password_12345678_ci_only
          DIRECTUS_API_TOKEN=test_directus_api_token_12345678
          DIRECTUS_WEBHOOK_SECRET=test_directus_webhook_secret_12345678
          DIRECTUS_MEDIA_RETENTION_DAYS=30

          # FileFlows
          FILEFLOWS_HOST=localhost
          FILEFLOWS_LOG_LEVEL=Information
          FILEFLOWS_DELETE_ORIGINALS=false
          TZ=UTC
          PUID=1000
          PGID=1000

          # SeaweedFS
          SEAWEEDFS_ACCESS_KEY=test_s3_access_key_ci_only
          SEAWEEDFS_SECRET_KEY=test_s3_secret_key_12345678_ci_only
          SEAWEEDFS_VOLUME_SIZE_LIMIT_MB=30000
          SEAWEEDFS_REPLICATION=000
          SEAWEEDFS_MAX_VOLUMES=7
          SEAWEEDFS_VOLUME_PREALLOCATE=false

          # Duplicati
          DUPLICATI_PASSWORD=test_duplicati_password_12345678_ci_only
          DUPLICATI_ENCRYPTION_KEY=test_duplicati_encryption_key_0123456789abcdef0123456789abcdef
          DUPLICATI_PASSPHRASE=test_duplicati_passphrase_12345678_ci_only

          # n8n
          N8N_ENCRYPTION_KEY=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
          N8N_BASIC_AUTH_USER=admin
          N8N_BASIC_AUTH_PASSWORD=test_n8n_basic_auth_password_12345678_ci_only

          # Global settings
          LOG_LEVEL=info
          EOF

      - name: Run ${{ matrix.service }} validation
        run: |
          echo "Running validation for ${{ matrix.service }}..."
          chmod +x tests/deployment/verify-${{ matrix.service }}.sh
          ./tests/deployment/verify-${{ matrix.service }}.sh

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests (Story 6.1)
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    needs: [validate-docker-compose, verify-structure, validate-services]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env from .env.example
        run: |
          cp .env.example .env
          # Use test credentials for CI
          sed -i 's/CHANGE_ME_TO_A_SECURE_PASSWORD_MIN_32_CHARS/test_password_ci_environment_12345678/g' .env
          sed -i 's/CHANGE_ME_TO_A_SECURE_KEY_MIN_32_CHARS/test_key_ci_environment_1234567890/g' .env
          sed -i 's/CHANGE_ME_TO_A_128_CHARACTER_HEX_STRING/0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef/g' .env

      - name: Pull Docker images
        run: docker compose pull

      - name: Start all services
        run: docker compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to become healthy (max 10 minutes)..."
          timeout 600 bash -c "
            while true; do
              HEALTHY=\$(docker compose ps --format json | jq -s '[.[] | select(.Health == \"healthy\")] | length')
              TOTAL=\$(docker compose ps --format json | jq -s '[.[] | select(.Health != null)] | length')
              echo \"Healthy: \$HEALTHY/\$TOTAL\"
              if [ \"\$HEALTHY\" -eq \"\$TOTAL\" ] && [ \"\$HEALTHY\" -gt 0 ]; then
                echo \"✅ All services healthy!\"
                break
              fi
              sleep 10
            done
          "

      - name: Run E2E workflow tests
        run: |
          chmod +x tests/integration/test-e2e-workflows.sh
          ./tests/integration/test-e2e-workflows.sh

      - name: Run component integration tests
        run: |
          chmod +x tests/integration/test-component-integration.sh
          ./tests/integration/test-component-integration.sh

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            tests/results/
            tests/logs/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -af --volumes
