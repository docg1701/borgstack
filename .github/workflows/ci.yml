name: BorgStack CI

# Trigger CI on push to main/feature branches and pull requests
on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main

jobs:
  validate-docker-compose:
    name: Validate Docker Compose Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml syntax
        run: |
          echo "Validating main docker-compose.yml..."
          docker compose -f docker-compose.yml config --quiet
          if [ $? -eq 0 ]; then
            echo "✅ docker-compose.yml is valid"
          else
            echo "❌ docker-compose.yml validation failed"
            exit 1
          fi

      - name: Validate docker-compose.override.yml syntax
        run: |
          echo "Validating docker-compose.override.yml..."
          docker compose -f docker-compose.yml -f docker-compose.override.yml config --quiet
          if [ $? -eq 0 ]; then
            echo "✅ docker-compose.override.yml is valid"
          else
            echo "❌ docker-compose.override.yml validation failed"
            exit 1
          fi

      - name: Validate docker-compose.prod.yml syntax
        run: |
          echo "Validating docker-compose.prod.yml..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml config --quiet
          if [ $? -eq 0 ]; then
            echo "✅ docker-compose.prod.yml is valid"
          else
            echo "❌ docker-compose.prod.yml validation failed"
            exit 1
          fi

      - name: Check for 'latest' tags in docker-compose.yml
        run: |
          echo "Checking for 'latest' image tags (not allowed per coding standards)..."
          if grep -n "image:.*:latest" docker-compose.yml docker-compose.override.yml docker-compose.prod.yml 2>/dev/null; then
            echo "❌ Found 'latest' tag(s) in Docker Compose files"
            echo "Per coding standards, all images must use pinned versions"
            exit 1
          else
            echo "✅ No 'latest' tags found"
          fi

      - name: Verify network naming conventions
        run: |
          echo "Verifying network naming follows 'borgstack_' prefix convention..."
          # Extract network names from docker-compose.yml and verify naming convention
          INVALID_NETWORKS=$(sed -n '/^networks:/,/^[^ ]/{/^  [a-z_-]\+:/p}' docker-compose.yml | sed 's/:.*//; s/^  //' | grep -v "^borgstack_" || true)
          if [ -n "$INVALID_NETWORKS" ]; then
            echo "❌ Found network(s) not following 'borgstack_' prefix convention:"
            echo "$INVALID_NETWORKS"
            exit 1
          else
            echo "✅ Network naming conventions verified"
          fi

      - name: Verify volume naming conventions
        run: |
          echo "Verifying volume naming follows 'borgstack_' prefix convention..."
          docker compose -f docker-compose.yml config 2>/dev/null | grep -A 1 "^volumes:" | grep -v "^volumes:" | grep -v "^--$" | grep -v "borgstack_" | grep -v "^$" && {
            echo "❌ Found volume(s) not following 'borgstack_' prefix convention"
            exit 1
          } || {
            echo "✅ Volume naming conventions verified"
          }

      - name: Verify network isolation configuration
        run: |
          echo "Running network isolation verification tests..."
          chmod +x tests/deployment/verify-network-isolation.sh
          ./tests/deployment/verify-network-isolation.sh

  verify-structure:
    name: Verify Repository Structure
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify required directories exist
        run: |
          echo "Verifying directory structure..."

          # Check all required directories from source-tree.md
          REQUIRED_DIRS=(
            "config"
            "config/postgresql"
            "config/redis"
            "config/seaweedfs"
            "config/caddy"
            "config/n8n"
            "config/chatwoot"
            "config/evolution"
            "config/duplicati"
            "scripts"
            "docs"
            "docs/03-services"
            "docs/04-integrations"
            "tests/integration"
            "tests/deployment"
            ".github/workflows"
          )

          MISSING_DIRS=()
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              MISSING_DIRS+=("$dir")
            fi
          done

          if [ ${#MISSING_DIRS[@]} -eq 0 ]; then
            echo "✅ All required directories exist"
          else
            echo "❌ Missing directories:"
            printf '%s\n' "${MISSING_DIRS[@]}"
            exit 1
          fi

      - name: Verify required root files exist
        run: |
          echo "Verifying required root files..."

          REQUIRED_FILES=(
            "docker-compose.yml"
            "docker-compose.override.yml"
            "docker-compose.prod.yml"
            ".gitignore"
            ".env.example"
            "README.md"
            "LICENSE"
          )

          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done

          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "✅ All required files exist"
          else
            echo "❌ Missing files:"
            printf '%s\n' "${MISSING_FILES[@]}"
            exit 1
          fi

      - name: Verify .env is properly ignored
        run: |
          echo "Verifying .env files are in .gitignore..."
          if grep -q "^\.env$" .gitignore && \
             grep -q "^\.env\.local$" .gitignore && \
             grep -q "^\.env\.\*\.local$" .gitignore; then
            echo "✅ .env files are properly configured in .gitignore"
          else
            echo "❌ .env files are not properly configured in .gitignore"
            exit 1
          fi

  validate-postgresql:
    name: Validate PostgreSQL Configuration
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          echo "Creating temporary .env file with test credentials..."
          cat > .env << 'EOF'
          # Test credentials for CI pipeline
          POSTGRES_PASSWORD=test_postgres_password_12345678
          N8N_DB_PASSWORD=test_n8n_password_12345678
          CHATWOOT_DB_PASSWORD=test_chatwoot_password_12345678
          DIRECTUS_DB_PASSWORD=test_directus_password_12345678
          EVOLUTION_DB_PASSWORD=test_evolution_password_12345678
          EOF

      - name: Verify PostgreSQL configuration in docker-compose.yml
        run: |
          echo "Verifying PostgreSQL service is configured..."

          # Check PostgreSQL image version is pinned correctly
          if docker compose config | grep -q "image: pgvector/pgvector:pg18"; then
            echo "✅ PostgreSQL image correctly configured (pgvector/pgvector:pg18)"
          else
            echo "❌ PostgreSQL image not configured correctly"
            exit 1
          fi

          # Check PostgreSQL is on borgstack_internal network
          if docker compose config | grep -A 30 "postgresql:" | grep -q "borgstack_internal"; then
            echo "✅ PostgreSQL connected to borgstack_internal network"
          else
            echo "❌ PostgreSQL not connected to borgstack_internal network"
            exit 1
          fi

          # Verify volume naming convention
          if docker compose config | grep -q "borgstack_postgresql_data"; then
            echo "✅ Volume follows borgstack_ naming convention"
          else
            echo "❌ Volume does not follow naming convention"
            exit 1
          fi

      - name: Run PostgreSQL validation tests
        run: |
          echo "Running comprehensive PostgreSQL validation tests..."
          chmod +x tests/deployment/verify-postgresql.sh
          bash tests/deployment/verify-postgresql.sh

      - name: Cleanup PostgreSQL test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v --remove-orphans || true
          rm -f .env
